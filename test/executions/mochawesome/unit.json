{
  "stats": {
    "suites": 26,
    "tests": 38,
    "passes": 38,
    "pending": 0,
    "failures": 0,
    "start": "2021-03-23T11:31:13.566Z",
    "end": "2021-03-23T11:31:14.456Z",
    "duration": 890,
    "testsRegistered": 38,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "45e71f67-d2a3-4eaa-b58f-062fa3f84655",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3252f5d1-f904-497b-b5f9-451da5163792",
          "title": "#formatComplaintData",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
          "file": "/test/unit/lib/format-complaint-data.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "21d6a333-5f53-4f5b-b8a2-06bdfede8e7c",
              "title": "reason",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
              "file": "/test/unit/lib/format-complaint-data.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "7b28c568-87e3-4e3d-8771-7435c7db5e9c",
                  "title": "immigration-application",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"SUBMITTING_APPLICATION\"",
                      "fullTitle": "#formatComplaintData reason immigration-application returns complaint data with type \"SUBMITTING_APPLICATION\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'immigration-application',\n  'immigration-application': 'technical-issues',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('SUBMITTING_APPLICATION');",
                      "err": {},
                      "uuid": "bd6f2999-94e7-48aa-9ccd-9fa7121ba406",
                      "parentUUID": "7b28c568-87e3-4e3d-8771-7435c7db5e9c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bd6f2999-94e7-48aa-9ccd-9fa7121ba406"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "6f660d02-cfa6-4ef6-956d-f8f35b9b17a6",
                  "title": "immigration-appointment",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"MAKING_APPOINTMENT\"",
                      "fullTitle": "#formatComplaintData reason immigration-appointment returns complaint data with type \"MAKING_APPOINTMENT\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'immigration-appointment',\n  'immigration-appointment': 'lack-availability',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('MAKING_APPOINTMENT');",
                      "err": {},
                      "uuid": "968461f1-f04f-4d62-ba0d-c4a60a77894e",
                      "parentUUID": "6f660d02-cfa6-4ef6-956d-f8f35b9b17a6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "968461f1-f04f-4d62-ba0d-c4a60a77894e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "3e6618c2-dc83-4437-8f66-53da7165b43f",
                  "title": "delays",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"DELAYS\"",
                      "fullTitle": "#formatComplaintData reason delays returns complaint data with type \"DELAYS\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'delays',\n  'delay-type': 'application-delay',\n  'return-of-documents': 'yes-other',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('DELAYS');",
                      "err": {},
                      "uuid": "6475a1cd-6c0b-4f0a-86e9-ef907cddf18c",
                      "parentUUID": "3e6618c2-dc83-4437-8f66-53da7165b43f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6475a1cd-6c0b-4f0a-86e9-ef907cddf18c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a72e07a4-0136-42d6-9100-cc0f4f6272d6",
                  "title": "biometric-residence-permit",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"BIOMETRIC_RESIDENCE_PERMIT\"",
                      "fullTitle": "#formatComplaintData reason biometric-residence-permit returns complaint data with type \"BIOMETRIC_RESIDENCE_PERMIT\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'biometric-residence-permit',\n  'biometric-residence-permit': 'card-incorrect',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('BIOMETRIC_RESIDENCE_PERMIT');",
                      "err": {},
                      "uuid": "3b8c4955-ab46-422a-afbc-33b0952edb7a",
                      "parentUUID": "a72e07a4-0136-42d6-9100-cc0f4f6272d6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3b8c4955-ab46-422a-afbc-33b0952edb7a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8cfdb7c1-7f84-413e-b30b-1363cea3326d",
                  "title": "immigration-decision",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"IMMIGRATION_DECISION\"",
                      "fullTitle": "#formatComplaintData reason immigration-decision returns complaint data with type \"IMMIGRATION_DECISION\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'immigration-decision',\n  'decision-outcome': 'negative',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('IMMIGRATION_DECISION');",
                      "err": {},
                      "uuid": "0679d0b6-f900-4ce4-b549-9b9c873c454e",
                      "parentUUID": "8cfdb7c1-7f84-413e-b30b-1363cea3326d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0679d0b6-f900-4ce4-b549-9b9c873c454e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "634ea5e7-9bf1-4c6b-a132-d1ece59155b2",
                  "title": "refund",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"REFUND\"",
                      "fullTitle": "#formatComplaintData reason refund returns complaint data with type \"REFUND\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'refund',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('REFUND');",
                      "err": {},
                      "uuid": "c98534b9-b368-40a2-8e56-bb391232946d",
                      "parentUUID": "634ea5e7-9bf1-4c6b-a132-d1ece59155b2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c98534b9-b368-40a2-8e56-bb391232946d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "1fc3295a-1ddf-4d9a-b166-286e314199b4",
                  "title": "staff-behaviour",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "c9df1a2e-f6ae-444c-ab6c-a282717732d3",
                      "title": "poor-information",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                      "file": "/test/unit/lib/format-complaint-data.spec.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "returns complaint data with type \"POOR_INFORMATION\"",
                          "fullTitle": "#formatComplaintData reason staff-behaviour poor-information returns complaint data with type \"POOR_INFORMATION\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const values = Object.assign({\n  reason: 'staff-behaviour',\n  'poor-info-or-behaviour': 'poor-information',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('POOR_INFORMATION');",
                          "err": {},
                          "uuid": "687b40aa-d27c-4883-9128-96583d2224ea",
                          "parentUUID": "c9df1a2e-f6ae-444c-ab6c-a282717732d3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "687b40aa-d27c-4883-9128-96583d2224ea"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    },
                    {
                      "uuid": "1095caf0-25c6-49e5-afee-cf5289c4d7c3",
                      "title": "staff-behaviour",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                      "file": "/test/unit/lib/format-complaint-data.spec.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "returns complaint data with type \"POOR_STAFF_BEHAVIOUR\"",
                          "fullTitle": "#formatComplaintData reason staff-behaviour staff-behaviour returns complaint data with type \"POOR_STAFF_BEHAVIOUR\"",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const values = Object.assign({\n  reason: 'staff-behaviour',\n  'poor-info-or-behaviour': 'staff-behaviour',\n  'staff-behaviour': 'in-letter',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('POOR_STAFF_BEHAVIOUR');",
                          "err": {},
                          "uuid": "0e3be30d-19a4-47ab-a9da-f68b8a9ad29e",
                          "parentUUID": "1095caf0-25c6-49e5-afee-cf5289c4d7c3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "0e3be30d-19a4-47ab-a9da-f68b8a9ad29e"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    },
                    {
                      "uuid": "57120a47-4c80-44dc-8fd6-95c51499668e",
                      "title": "invalid value",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                      "file": "/test/unit/lib/format-complaint-data.spec.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "throws an error if an invalid poor-info-or-behaviour value is provided",
                          "fullTitle": "#formatComplaintData reason staff-behaviour invalid value throws an error if an invalid poor-info-or-behaviour value is provided",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const values = Object.assign({\n  reason: 'staff-behaviour',\n  'poor-info-or-behaviour': 'invalid',\n}, complaintDetailsBase);\nexpect(() => formatComplaintData(values)).to.throw('Invalid poor-info-or-behaviour value');",
                          "err": {},
                          "uuid": "768252f9-40af-4f03-b4c6-c9284612d9fb",
                          "parentUUID": "57120a47-4c80-44dc-8fd6-95c51499668e",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "768252f9-40af-4f03-b4c6-c9284612d9fb"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "3a0a6484-effc-4156-a29e-3858ec3d00de",
                  "title": "existing-complaint",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"EXISTING\"",
                      "fullTitle": "#formatComplaintData reason existing-complaint returns complaint data with type \"EXISTING\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'existing-complaint',\n  'existing-complaint': 'yes',\n  'complaint-reference-number': 'ghjkld',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('EXISTING');",
                      "err": {},
                      "uuid": "5e786a16-6ba5-49aa-87df-876cc5dd4eac",
                      "parentUUID": "3a0a6484-effc-4156-a29e-3858ec3d00de",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5e786a16-6ba5-49aa-87df-876cc5dd4eac"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b8c2b8c2-4844-4589-9068-a0372569c667",
                  "title": "other-complaint",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"SOMETHING_ELSE\"",
                      "fullTitle": "#formatComplaintData reason other-complaint returns complaint data with type \"SOMETHING_ELSE\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'other-complaint',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('SOMETHING_ELSE');",
                      "err": {},
                      "uuid": "40fb5a72-cc9f-44f5-8473-917e23761f8a",
                      "parentUUID": "b8c2b8c2-4844-4589-9068-a0372569c667",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "40fb5a72-cc9f-44f5-8473-917e23761f8a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "ed64935d-6a90-47ed-af28-c004ae22ea92",
                  "title": "invalid reason",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "throws an error if an invalid reason is provided",
                      "fullTitle": "#formatComplaintData reason invalid reason throws an error if an invalid reason is provided",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'invalid',\n}, complaintDetailsBase);\nexpect(() => formatComplaintData(values)).to.throw('Complaint reason not recognized');",
                      "err": {},
                      "uuid": "9ce23800-1e38-4cce-80c2-17357d819d3e",
                      "parentUUID": "ed64935d-6a90-47ed-af28-c004ae22ea92",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9ce23800-1e38-4cce-80c2-17357d819d3e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5e02b225-d204-475b-8a93-4974aad66913",
          "title": "Complaint",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
          "file": "/test/unit/lib/json-converters/complaint.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Complaint\"",
              "fullTitle": "Complaint \"before each\" hook in \"Complaint\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const momentStub = sinon.stub().returns({\n      format: () => (creationDate)\n    });\n    Complaint = proxyquire('../../../../apps/ukvi-complaints/lib/json-converters/complaint', {\n      'moment': momentStub\n    });",
              "err": {},
              "uuid": "cfb9167c-8e5c-47c1-97ed-a4f605ea8c0c",
              "parentUUID": "5e02b225-d204-475b-8a93-4974aad66913",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should have property complaintAttributes which is an object",
              "fullTitle": "Complaint Should have property complaintAttributes which is an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "complaint = new Complaint(applicantTestValues);\nexpect(complaint.complaintAttributes).to.be.an('object');",
              "err": {},
              "uuid": "0298ac59-99cc-41f7-b49e-196ff972929b",
              "parentUUID": "5e02b225-d204-475b-8a93-4974aad66913",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "e8cc945a-9643-49ea-a589-d206584bc44d",
              "title": "complaintAttributes",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
              "file": "/test/unit/lib/json-converters/complaint.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should have creationDate set",
                  "fullTitle": "Complaint complaintAttributes Should have creationDate set",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "complaint = new Complaint(applicantTestValues);\nexpect(complaint.complaintAttributes.creationDate).to.eql(creationDate);",
                  "err": {},
                  "uuid": "c391f25d-867c-4c7e-a797-1796a4b4cacd",
                  "parentUUID": "e8cc945a-9643-49ea-a589-d206584bc44d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "af14b3ba-f59c-48e9-8472-7e7a8b09f887",
                  "title": "reporterDetails",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                  "file": "/test/unit/lib/json-converters/complaint.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "cc908d30-8f43-4deb-b788-fff531e8a022",
                      "title": "applicant",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                      "file": "/test/unit/lib/json-converters/complaint.spec.js",
                      "beforeHooks": [
                        {
                          "title": "\"before each\" hook in \"applicant\"",
                          "fullTitle": "Complaint complaintAttributes reporterDetails applicant \"before each\" hook in \"applicant\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "reporterDetailsValues = Object.assign({}, applicantTestValues);",
                          "err": {},
                          "uuid": "0c365341-292d-4821-87fb-faf6dfcaa5c5",
                          "parentUUID": "cc908d30-8f43-4deb-b788-fff531e8a022",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "Should return applicant details without phone number if not included",
                          "fullTitle": "Complaint complaintAttributes reporterDetails applicant Should return applicant details without phone number if not included",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "complaint = new Complaint(reporterDetailsValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeApplicant,\n  applicantName: testApplicantName,\n  applicantNationality: testApplicantNationality,\n  applicantDob: testApplicantDob,\n  applicantEmail: testApplicantEmail,\n});",
                          "err": {},
                          "uuid": "a74268b1-7bce-4706-8628-8732200f414f",
                          "parentUUID": "cc908d30-8f43-4deb-b788-fff531e8a022",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "Should return applicant details with phone number if included",
                          "fullTitle": "Complaint complaintAttributes reporterDetails applicant Should return applicant details with phone number if included",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "reporterDetailsValues['applicant-phone'] = testApplicantPhone;\ncomplaint = new Complaint(reporterDetailsValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeApplicant,\n  applicantName: testApplicantName,\n  applicantNationality: testApplicantNationality,\n  applicantDob: testApplicantDob,\n  applicantEmail: testApplicantEmail,\n  applicantPhone: testApplicantPhone,\n});",
                          "err": {},
                          "uuid": "d29446e1-468e-46c9-922e-adf0be481b97",
                          "parentUUID": "cc908d30-8f43-4deb-b788-fff531e8a022",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a74268b1-7bce-4706-8628-8732200f414f",
                        "d29446e1-468e-46c9-922e-adf0be481b97"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    },
                    {
                      "uuid": "54bae074-a3f2-4eef-91d1-6d133ff63899",
                      "title": "agent",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                      "file": "/test/unit/lib/json-converters/complaint.spec.js",
                      "beforeHooks": [
                        {
                          "title": "\"before each\" hook in \"agent\"",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent \"before each\" hook in \"agent\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues = Object.assign({}, agentTestValues);",
                          "err": {},
                          "uuid": "e447e8d6-79d2-4514-8446-34165f8a2760",
                          "parentUUID": "54bae074-a3f2-4eef-91d1-6d133ff63899",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "it should return agent and applicant details with agentType RELATIVE",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent it should return agent and applicant details with agentType RELATIVE",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['who-representing'] = 'relative';\ncomplaint = new Complaint(agentValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeAgent,\n  applicantDetails: {\n    applicantName: testApplicantName,\n    applicantNationality: testApplicantNationality,\n    applicantDob: testApplicantDob,\n  },\n  agentDetails: {\n    agentName: testAgentName,\n    agentType: 'RELATIVE',\n    agentEmail: testAgentEmail\n  }\n});",
                          "err": {},
                          "uuid": "bdf6d33c-0598-43f5-a6f5-ee4a2334f14d",
                          "parentUUID": "54bae074-a3f2-4eef-91d1-6d133ff63899",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "it should return agent and applicant details with agentType LEGAL_REP",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent it should return agent and applicant details with agentType LEGAL_REP",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['who-representing'] = 'legal-rep';\ncomplaint = new Complaint(agentValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeAgent,\n  applicantDetails: {\n    applicantName: testApplicantName,\n    applicantNationality: testApplicantNationality,\n    applicantDob: testApplicantDob,\n  },\n  agentDetails: {\n    agentName: testAgentName,\n    agentType: 'LEGAL_REP',\n    agentEmail: testAgentEmail\n  }\n});",
                          "err": {},
                          "uuid": "fd646923-77da-4b84-8e45-d9998bb73efa",
                          "parentUUID": "54bae074-a3f2-4eef-91d1-6d133ff63899",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "it should return agent and applicant details with agentType SPONSOR",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent it should return agent and applicant details with agentType SPONSOR",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['who-representing'] = 'sponsor';\ncomplaint = new Complaint(agentValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeAgent,\n  applicantDetails: {\n    applicantName: testApplicantName,\n    applicantNationality: testApplicantNationality,\n    applicantDob: testApplicantDob,\n  },\n  agentDetails: {\n    agentName: testAgentName,\n    agentType: 'SPONSOR',\n    agentEmail: testAgentEmail\n  }\n});",
                          "err": {},
                          "uuid": "22c42f4c-8881-4fc2-b2a0-e05b6d2ca1b8",
                          "parentUUID": "54bae074-a3f2-4eef-91d1-6d133ff63899",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "it should return agent and applicant details with agentType SUPPORT_ORG",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent it should return agent and applicant details with agentType SUPPORT_ORG",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['who-representing'] = 'support-org';\ncomplaint = new Complaint(agentValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeAgent,\n  applicantDetails: {\n    applicantName: testApplicantName,\n    applicantNationality: testApplicantNationality,\n    applicantDob: testApplicantDob,\n  },\n  agentDetails: {\n    agentName: testAgentName,\n    agentType: 'SUPPORT_ORG',\n    agentEmail: testAgentEmail\n  }\n});",
                          "err": {},
                          "uuid": "cf2ba032-fb19-4509-ba09-3501a1c0d31f",
                          "parentUUID": "54bae074-a3f2-4eef-91d1-6d133ff63899",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "Should return agent details with phone number if included",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent Should return agent details with phone number if included",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['agent-phone'] = testAgentPhone;\nagentValues['who-representing'] = 'relative';\ncomplaint = new Complaint(agentValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeAgent,\n  applicantDetails: {\n    applicantName: testApplicantName,\n    applicantNationality: testApplicantNationality,\n    applicantDob: testApplicantDob,\n  },\n  agentDetails: {\n    agentName: testAgentName,\n    agentType: 'RELATIVE',\n    agentEmail: testAgentEmail,\n    agentPhone: testAgentPhone,\n  }\n});",
                          "err": {},
                          "uuid": "386000cb-9cac-4bfd-a126-3f2d3b181bf8",
                          "parentUUID": "54bae074-a3f2-4eef-91d1-6d133ff63899",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should throw error if incorrect who-representing type specified",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent should throw error if incorrect who-representing type specified",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['who-representing'] = 'error-agent';\nexpect(() => new Complaint(agentValues)).to.throw('invalid \"who-representing\" value');",
                          "err": {},
                          "uuid": "4cb9cb26-4c5d-4069-8e7a-f7b36440c238",
                          "parentUUID": "54bae074-a3f2-4eef-91d1-6d133ff63899",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "bdf6d33c-0598-43f5-a6f5-ee4a2334f14d",
                        "fd646923-77da-4b84-8e45-d9998bb73efa",
                        "22c42f4c-8881-4fc2-b2a0-e05b6d2ca1b8",
                        "cf2ba032-fb19-4509-ba09-3501a1c0d31f",
                        "386000cb-9cac-4bfd-a126-3f2d3b181bf8",
                        "4cb9cb26-4c5d-4069-8e7a-f7b36440c238"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f23dab3d-e7cb-4f79-843a-f1c66bbe2088",
                  "title": "reference",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                  "file": "/test/unit/lib/json-converters/complaint.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"reference\"",
                      "fullTitle": "Complaint complaintAttributes reference \"before each\" hook in \"reference\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues = Object.assign({}, applicantTestValues);",
                      "err": {},
                      "uuid": "beb3e8f2-28d6-401a-a4e1-5d96298d7861",
                      "parentUUID": "f23dab3d-e7cb-4f79-843a-f1c66bbe2088",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Does not include a reference if reference-number is not present",
                      "fullTitle": "Complaint complaintAttributes reference Does not include a reference if reference-number is not present",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "complaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint).to.not.have.all.keys('reference');",
                      "err": {},
                      "uuid": "407b61aa-46b5-4460-b03b-fba1b33c82ba",
                      "parentUUID": "f23dab3d-e7cb-4f79-843a-f1c66bbe2088",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Does not include a reference if reference-numbers is specified as \"none\"",
                      "fullTitle": "Complaint complaintAttributes reference Does not include a reference if reference-numbers is specified as \"none\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'none';\ncomplaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint).to.not.have.all.keys('reference');",
                      "err": {},
                      "uuid": "ad9ea4cc-d890-4179-bdda-6af2ac96a0b2",
                      "parentUUID": "f23dab3d-e7cb-4f79-843a-f1c66bbe2088",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "If \"gwf\" reference, reference number will be set on GWF_REF",
                      "fullTitle": "Complaint complaintAttributes reference If \"gwf\" reference, reference number will be set on GWF_REF",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'gwf';\nreferenceValues['gwf-reference'] = testGwfRef;\ncomplaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint.reference).to.eql({\n  referenceType: 'GWF_REF',\n  reference: testGwfRef\n});",
                      "err": {},
                      "uuid": "6a8bd5d0-a5dc-4562-a443-6c9367815aa3",
                      "parentUUID": "f23dab3d-e7cb-4f79-843a-f1c66bbe2088",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "If \"ho\" reference, reference number will be set on HO_REF",
                      "fullTitle": "Complaint complaintAttributes reference If \"ho\" reference, reference number will be set on HO_REF",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'ho';\nreferenceValues['ho-reference'] = testHoRef;\ncomplaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint.reference).to.eql({\n  referenceType: 'HO_REF',\n  reference: testHoRef\n});",
                      "err": {},
                      "uuid": "851c4067-612e-47e5-b58a-202491f682cc",
                      "parentUUID": "f23dab3d-e7cb-4f79-843a-f1c66bbe2088",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "If \"ihs\" reference, reference number will be set on IHS_REF",
                      "fullTitle": "Complaint complaintAttributes reference If \"ihs\" reference, reference number will be set on IHS_REF",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'ihs';\nreferenceValues['ihs-reference'] = testIhsRef;\ncomplaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint.reference).to.eql({\n  referenceType: 'IHS_REF',\n  reference: testIhsRef\n});",
                      "err": {},
                      "uuid": "a83aa3ba-3785-40c9-9b12-c904320b8730",
                      "parentUUID": "f23dab3d-e7cb-4f79-843a-f1c66bbe2088",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "If \"uan\" reference, reference number will be set on UAN_REF",
                      "fullTitle": "Complaint complaintAttributes reference If \"uan\" reference, reference number will be set on UAN_REF",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'uan';\nreferenceValues['uan-reference'] = testUanRef;\ncomplaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint.reference).to.eql({\n  referenceType: 'UAN_REF',\n  reference: testUanRef\n});",
                      "err": {},
                      "uuid": "945fe502-9971-49fd-9251-9c3e6c4e349c",
                      "parentUUID": "f23dab3d-e7cb-4f79-843a-f1c66bbe2088",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error if incorrect ref type specified",
                      "fullTitle": "Complaint complaintAttributes reference should throw error if incorrect ref type specified",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'fff';\nexpect(() => new Complaint(referenceValues)).to.throw('invalid \"reference-numbers\" value');",
                      "err": {},
                      "uuid": "aa46f23e-2876-46a8-8f75-3dccecdd1147",
                      "parentUUID": "f23dab3d-e7cb-4f79-843a-f1c66bbe2088",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "407b61aa-46b5-4460-b03b-fba1b33c82ba",
                    "ad9ea4cc-d890-4179-bdda-6af2ac96a0b2",
                    "6a8bd5d0-a5dc-4562-a443-6c9367815aa3",
                    "851c4067-612e-47e5-b58a-202491f682cc",
                    "a83aa3ba-3785-40c9-9b12-c904320b8730",
                    "945fe502-9971-49fd-9251-9c3e6c4e349c",
                    "aa46f23e-2876-46a8-8f75-3dccecdd1147"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fb9a876f-94ae-4583-84c5-d5b66235ea12",
                  "title": "complaintDetails",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                  "file": "/test/unit/lib/json-converters/complaint.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "8b078a28-6521-48a4-9bf8-b32de7dd0b7c",
                      "title": "applicationLocation",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                      "file": "/test/unit/lib/json-converters/complaint.spec.js",
                      "beforeHooks": [
                        {
                          "title": "\"before each\" hook in \"applicationLocation\"",
                          "fullTitle": "Complaint complaintAttributes complaintDetails applicationLocation \"before each\" hook in \"applicationLocation\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "applicationLocationValues = Object.assign({}, applicantTestValues);",
                          "err": {},
                          "uuid": "835b7414-3932-4861-a814-17a0b4eed56b",
                          "parentUUID": "8b078a28-6521-48a4-9bf8-b32de7dd0b7c",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "If no location provided, applicationLocation is not set",
                          "fullTitle": "Complaint complaintAttributes complaintDetails applicationLocation If no location provided, applicationLocation is not set",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "complaint = new Complaint(applicationLocationValues);\nexpect(complaint.complaintAttributes.complaint.complaintDetails).to.not.have.all.keys('applicationLocation');",
                          "err": {},
                          "uuid": "4e2ffbdb-5247-4384-afb5-09fb3fc3a1e7",
                          "parentUUID": "8b078a28-6521-48a4-9bf8-b32de7dd0b7c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "If applied from \"inside-uk\", applicationLocation set to INSIDE_UK",
                          "fullTitle": "Complaint complaintAttributes complaintDetails applicationLocation If applied from \"inside-uk\", applicationLocation set to INSIDE_UK",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "applicationLocationValues['where-applied-from'] = 'inside-uk';\ncomplaint = new Complaint(applicationLocationValues);\nexpect(complaint.complaintAttributes.complaint.complaintDetails.applicationLocation).to.eql('INSIDE_UK');",
                          "err": {},
                          "uuid": "0e00c7f4-c9bb-4e16-a618-4a0ce4e0c783",
                          "parentUUID": "8b078a28-6521-48a4-9bf8-b32de7dd0b7c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "If applied from \"outside-uk\", applicationLocation set to OUTSIDE_UK",
                          "fullTitle": "Complaint complaintAttributes complaintDetails applicationLocation If applied from \"outside-uk\", applicationLocation set to OUTSIDE_UK",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "applicationLocationValues['where-applied-from'] = 'outside-uk';\ncomplaint = new Complaint(applicationLocationValues);\nexpect(complaint.complaintAttributes.complaint.complaintDetails.applicationLocation).to.eql('OUTSIDE_UK');",
                          "err": {},
                          "uuid": "84c61afe-4926-4e4d-8f34-8d86a5ff2454",
                          "parentUUID": "8b078a28-6521-48a4-9bf8-b32de7dd0b7c",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "It throws an error if invalid \"where-applied-from\"",
                          "fullTitle": "Complaint complaintAttributes complaintDetails applicationLocation It throws an error if invalid \"where-applied-from\"",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "applicationLocationValues['where-applied-from'] = 'location';\nexpect(() => new Complaint(applicationLocationValues)).to.throw('invalid \"where-applied-from\" value');",
                          "err": {},
                          "uuid": "85b32e65-f278-4c55-bc0f-273b2ca79c9b",
                          "parentUUID": "8b078a28-6521-48a4-9bf8-b32de7dd0b7c",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "4e2ffbdb-5247-4384-afb5-09fb3fc3a1e7",
                        "0e00c7f4-c9bb-4e16-a618-4a0ce4e0c783",
                        "84c61afe-4926-4e4d-8f34-8d86a5ff2454",
                        "85b32e65-f278-4c55-bc0f-273b2ca79c9b"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 2,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "c391f25d-867c-4c7e-a797-1796a4b4cacd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "0298ac59-99cc-41f7-b49e-196ff972929b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb23761d-a0c5-4f08-8314-29c836ef20a8",
          "title": "utils",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/utils.spec.js",
          "file": "/test/unit/lib/utils.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"utils\"",
              "fullTitle": "utils \"before each\" hook in \"utils\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "uuidStub = sinon.stub().returns(testUuid);\nsendStub = sinon.stub().resolves();\nsendStub.withArgs({\n  id: testUuid,\n  body: JSON.stringify(invalidComplaintData)\n}).rejects();\ncreateSub = sinon.stub().returns({\n  send: sendStub\n});\nutils = proxyquire('../../../apps/ukvi-complaints/lib/utils', {\n  'sqs-producer': {\n    Producer: {\n      create: createSub\n    }\n  },\n  'uuid': {\n    v4: uuidStub\n  }\n});",
              "err": {},
              "uuid": "968782a4-9090-4606-a3ff-15f9ffae4235",
              "parentUUID": "bb23761d-a0c5-4f08-8314-29c836ef20a8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"utils\"",
              "fullTitle": "utils \"after each\" hook in \"utils\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "c23b2124-c038-4440-865b-558d92d486a7",
              "parentUUID": "bb23761d-a0c5-4f08-8314-29c836ef20a8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "785ad712-2242-41e4-aa10-37c850ed7ead",
              "title": "#validateAgainstSchema",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/utils.spec.js",
              "file": "/test/unit/lib/utils.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the complaintData object fits the schema",
                  "fullTitle": "utils #validateAgainstSchema returns true if the complaintData object fits the schema",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(utils.validateAgainstSchema(validComplaintData)).to.eql(true);",
                  "err": {},
                  "uuid": "0ebf82b7-7528-48c1-85d3-27949a434c38",
                  "parentUUID": "785ad712-2242-41e4-aa10-37c850ed7ead",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws an error if the complaintData object does not fit the schema",
                  "fullTitle": "utils #validateAgainstSchema throws an error if the complaintData object does not fit the schema",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => utils.validateAgainstSchema(invalidComplaintData)).to.throw();",
                  "err": {},
                  "uuid": "becedfeb-1495-4aa4-8091-69f594d02763",
                  "parentUUID": "785ad712-2242-41e4-aa10-37c850ed7ead",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ebf82b7-7528-48c1-85d3-27949a434c38",
                "becedfeb-1495-4aa4-8091-69f594d02763"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca4f7171-6116-461e-8168-be902f9bb34c",
              "title": "#sendToQueue",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/utils.spec.js",
              "file": "/test/unit/lib/utils.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calls create on the sqs producer with SQS parameters",
                  "fullTitle": "utils #sendToQueue calls create on the sqs producer with SQS parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "utils.sendToQueue(validComplaintData);\nexpect(createSub).to.have.been.calledOnceWith({\n  queueUrl: 'http://localhost:4566/000000000000/local-queue',\n  region: 'eu-west-2'\n});",
                  "err": {},
                  "uuid": "714d956e-9a5e-4333-8a99-6611ac89fb92",
                  "parentUUID": "ca4f7171-6116-461e-8168-be902f9bb34c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calls send on sqs producer with a unique id and stringifyed complaint data",
                  "fullTitle": "utils #sendToQueue calls send on sqs producer with a unique id and stringifyed complaint data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "utils.sendToQueue(validComplaintData);\nexpect(sendStub).to.have.been.calledOnceWith(\n  [\n    {\n      id: testUuid,\n      body: JSON.stringify(validComplaintData)\n    }\n  ]\n);",
                  "err": {},
                  "uuid": "9b68c2ce-0a51-4a38-a7c7-5e9637e0a1da",
                  "parentUUID": "ca4f7171-6116-461e-8168-be902f9bb34c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rejects if send fails",
                  "fullTitle": "utils #sendToQueue rejects if send fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// eslint-disable-next-line no-unused-expressions\nexpect(utils.sendToQueue(invalidComplaintData)).to.be.rejected;",
                  "err": {},
                  "uuid": "e3b20aaa-0e1b-4557-ab00-140ced44d707",
                  "parentUUID": "ca4f7171-6116-461e-8168-be902f9bb34c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "714d956e-9a5e-4333-8a99-6611ac89fb92",
                "9b68c2ce-0a51-4a38-a7c7-5e9637e0a1da",
                "e3b20aaa-0e1b-4557-ab00-140ced44d707"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "unit",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "none",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "id": "default",
        "consoleReporter": "none",
        "reportDir": "test/executions/mochawesome",
        "reportFilename": "unit"
      },
      "version": "5.2.0"
    }
  }
}