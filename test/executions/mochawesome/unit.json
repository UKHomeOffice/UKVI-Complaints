{
  "stats": {
    "suites": 49,
    "tests": 92,
    "passes": 92,
    "pending": 0,
    "failures": 0,
    "start": "2021-03-25T13:29:52.349Z",
    "end": "2021-03-25T13:29:53.516Z",
    "duration": 1167,
    "testsRegistered": 92,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0492b360-46e3-4b89-a4a8-58a380a0816f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "92feb3fb-ace0-4669-898a-d58d55ebef89",
          "title": "#formatComplaintData",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
          "file": "/test/unit/lib/format-complaint-data.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "89529f71-5bee-4583-8739-60895fdb4e8e",
              "title": "reason",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
              "file": "/test/unit/lib/format-complaint-data.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "273c3eae-c21c-4ce0-908a-ac5930a10f48",
                  "title": "immigration-application",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"SUBMITTING_APPLICATION\"",
                      "fullTitle": "#formatComplaintData reason immigration-application returns complaint data with type \"SUBMITTING_APPLICATION\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'immigration-application',\n  'immigration-application': 'technical-issues',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('SUBMITTING_APPLICATION');",
                      "err": {},
                      "uuid": "51781735-41c3-4f86-91ab-d983881d1806",
                      "parentUUID": "273c3eae-c21c-4ce0-908a-ac5930a10f48",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "51781735-41c3-4f86-91ab-d983881d1806"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "052242da-b669-4e8d-ade1-29353437e1bf",
                  "title": "immigration-appointment",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"MAKING_APPOINTMENT\"",
                      "fullTitle": "#formatComplaintData reason immigration-appointment returns complaint data with type \"MAKING_APPOINTMENT\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'immigration-appointment',\n  'immigration-appointment': 'lack-availability',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('MAKING_APPOINTMENT');",
                      "err": {},
                      "uuid": "62d23477-fe6c-46fd-895b-a132b4f3599c",
                      "parentUUID": "052242da-b669-4e8d-ade1-29353437e1bf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "62d23477-fe6c-46fd-895b-a132b4f3599c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "2b74006c-a579-4612-bb58-601ddfeb7ef2",
                  "title": "delays",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"DELAYS\"",
                      "fullTitle": "#formatComplaintData reason delays returns complaint data with type \"DELAYS\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'delays',\n  'delay-type': 'application-delay',\n  'return-of-documents': 'yes-other',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('DELAYS');",
                      "err": {},
                      "uuid": "ba26e918-f383-4b68-aff3-93c050ab4f17",
                      "parentUUID": "2b74006c-a579-4612-bb58-601ddfeb7ef2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ba26e918-f383-4b68-aff3-93c050ab4f17"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "2cbeae1f-4303-4e7e-8112-f3851160169b",
                  "title": "biometric-residence-permit",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"BIOMETRIC_RESIDENCE_PERMIT\"",
                      "fullTitle": "#formatComplaintData reason biometric-residence-permit returns complaint data with type \"BIOMETRIC_RESIDENCE_PERMIT\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'biometric-residence-permit',\n  'biometric-residence-permit': 'card-incorrect',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('BIOMETRIC_RESIDENCE_PERMIT');",
                      "err": {},
                      "uuid": "6ab7a8df-a3e3-4989-978f-1bca7e007d43",
                      "parentUUID": "2cbeae1f-4303-4e7e-8112-f3851160169b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6ab7a8df-a3e3-4989-978f-1bca7e007d43"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "2ab88265-4f15-453e-9336-40670b3f21b8",
                  "title": "immigration-decision",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"IMMIGRATION_DECISION\"",
                      "fullTitle": "#formatComplaintData reason immigration-decision returns complaint data with type \"IMMIGRATION_DECISION\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'immigration-decision',\n  'decision-outcome': 'negative',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('IMMIGRATION_DECISION');",
                      "err": {},
                      "uuid": "c26b009f-fffa-468b-a373-40c68c1b5603",
                      "parentUUID": "2ab88265-4f15-453e-9336-40670b3f21b8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c26b009f-fffa-468b-a373-40c68c1b5603"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "59d613ad-d1f8-4405-8e06-ac3049cf4d34",
                  "title": "refund",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"REFUND\"",
                      "fullTitle": "#formatComplaintData reason refund returns complaint data with type \"REFUND\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'refund',\n  refund: 'no',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('REFUND');",
                      "err": {},
                      "uuid": "86be0e61-7326-4740-bc85-6e64a8b5eb6e",
                      "parentUUID": "59d613ad-d1f8-4405-8e06-ac3049cf4d34",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "86be0e61-7326-4740-bc85-6e64a8b5eb6e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fd873aeb-76e8-4e5b-be56-52e2329ace5b",
                  "title": "staff-behaviour",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "82dd9d6b-db30-4b0e-847a-0819bbb7fc46",
                      "title": "poor-information",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                      "file": "/test/unit/lib/format-complaint-data.spec.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "returns complaint data with type \"POOR_INFORMATION\"",
                          "fullTitle": "#formatComplaintData reason staff-behaviour poor-information returns complaint data with type \"POOR_INFORMATION\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const values = Object.assign({\n  reason: 'staff-behaviour',\n  'poor-info-or-behaviour': 'poor-information',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('POOR_INFORMATION');",
                          "err": {},
                          "uuid": "904f6f6e-42f8-46d2-a8e3-b3ba70d2f355",
                          "parentUUID": "82dd9d6b-db30-4b0e-847a-0819bbb7fc46",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "904f6f6e-42f8-46d2-a8e3-b3ba70d2f355"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    },
                    {
                      "uuid": "102cfb30-dcf3-42ae-be57-79be21c04479",
                      "title": "staff-behaviour",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                      "file": "/test/unit/lib/format-complaint-data.spec.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "returns complaint data with type \"POOR_STAFF_BEHAVIOUR\"",
                          "fullTitle": "#formatComplaintData reason staff-behaviour staff-behaviour returns complaint data with type \"POOR_STAFF_BEHAVIOUR\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const values = Object.assign({\n  reason: 'staff-behaviour',\n  'poor-info-or-behaviour': 'staff-behaviour',\n  'staff-behaviour': 'in-letter',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('POOR_STAFF_BEHAVIOUR');",
                          "err": {},
                          "uuid": "47d8b268-6fd7-4c87-8e06-70b7a813c176",
                          "parentUUID": "102cfb30-dcf3-42ae-be57-79be21c04479",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "47d8b268-6fd7-4c87-8e06-70b7a813c176"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    },
                    {
                      "uuid": "4d3862d6-e79f-47e9-966c-9178c989b0ae",
                      "title": "invalid value",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                      "file": "/test/unit/lib/format-complaint-data.spec.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "throws an error if an invalid poor-info-or-behaviour value is provided",
                          "fullTitle": "#formatComplaintData reason staff-behaviour invalid value throws an error if an invalid poor-info-or-behaviour value is provided",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const values = Object.assign({\n  reason: 'staff-behaviour',\n  'poor-info-or-behaviour': 'invalid',\n}, complaintDetailsBase);\nexpect(() => formatComplaintData(values)).to.throw('Invalid poor-info-or-behaviour value');",
                          "err": {},
                          "uuid": "029e6fb8-877d-45a6-b466-724bb6b9404b",
                          "parentUUID": "4d3862d6-e79f-47e9-966c-9178c989b0ae",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "029e6fb8-877d-45a6-b466-724bb6b9404b"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c839014c-bd2e-4814-a794-15164e8fc5f8",
                  "title": "existing-complaint",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"EXISTING\"",
                      "fullTitle": "#formatComplaintData reason existing-complaint returns complaint data with type \"EXISTING\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'existing-complaint',\n  'existing-complaint': 'yes',\n  'complaint-reference-number': 'ghjkld',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('EXISTING');",
                      "err": {},
                      "uuid": "4a249170-79e2-4b44-a844-49b9c7b79b06",
                      "parentUUID": "c839014c-bd2e-4814-a794-15164e8fc5f8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4a249170-79e2-4b44-a844-49b9c7b79b06"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "4c315467-0173-4535-872b-f46624c69f5d",
                  "title": "other-complaint",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns complaint data with type \"SOMETHING_ELSE\"",
                      "fullTitle": "#formatComplaintData reason other-complaint returns complaint data with type \"SOMETHING_ELSE\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'other-complaint',\n}, complaintDetailsBase);\nconst complaintData = formatComplaintData(values);\nexpect(complaintData.complaint.complaintType).to.eql('SOMETHING_ELSE');",
                      "err": {},
                      "uuid": "0ce999f9-2627-42be-9bae-95cb1b50c934",
                      "parentUUID": "4c315467-0173-4535-872b-f46624c69f5d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0ce999f9-2627-42be-9bae-95cb1b50c934"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "aef42d21-918c-40e9-8649-0ce090e5c50d",
                  "title": "invalid reason",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/format-complaint-data.spec.js",
                  "file": "/test/unit/lib/format-complaint-data.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "throws an error if an invalid reason is provided",
                      "fullTitle": "#formatComplaintData reason invalid reason throws an error if an invalid reason is provided",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  reason: 'invalid',\n}, complaintDetailsBase);\nexpect(() => formatComplaintData(values)).to.throw('Complaint reason not recognized');",
                      "err": {},
                      "uuid": "a5ec5d91-8ab1-498b-af1c-50064f0bb1a8",
                      "parentUUID": "aef42d21-918c-40e9-8649-0ce090e5c50d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a5ec5d91-8ab1-498b-af1c-50064f0bb1a8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fa4c3929-8e32-4124-ae07-1ad55cefa715",
          "title": "BrpComplaint",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/brp.spec.js",
          "file": "/test/unit/lib/json-converters/brp.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dbabd962-8575-4e41-bbb9-36588f7a8cb6",
              "title": "problemExperienced",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/brp.spec.js",
              "file": "/test/unit/lib/json-converters/brp.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns \"CARD_INCORRECT\" if \"card-incorrect\" value passed in",
                  "fullTitle": "BrpComplaint problemExperienced returns \"CARD_INCORRECT\" if \"card-incorrect\" value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'biometric-residence-permit': 'card-incorrect'\n}, complaintDetailsBase);\nconst brpComplaint = new BrpComplaint(values);\nexpect(brpComplaint.complaintAttributes.complaint.complaintDetails.problemExperienced).to.eql('CARD_INCORRECT');",
                  "err": {},
                  "uuid": "66021af3-2269-4a36-a8c9-bad4ddb956ee",
                  "parentUUID": "dbabd962-8575-4e41-bbb9-36588f7a8cb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"CARD_NOT_ARRIVED\" if \"card-not-arrived\" value passed in",
                  "fullTitle": "BrpComplaint problemExperienced returns \"CARD_NOT_ARRIVED\" if \"card-not-arrived\" value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'biometric-residence-permit': 'card-not-arrived'\n}, complaintDetailsBase);\nconst brpComplaint = new BrpComplaint(values);\nexpect(brpComplaint.complaintAttributes.complaint.complaintDetails.problemExperienced).to.eql('CARD_NOT_ARRIVED');",
                  "err": {},
                  "uuid": "605d33d8-440f-42f6-94d9-d47d87812509",
                  "parentUUID": "dbabd962-8575-4e41-bbb9-36588f7a8cb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"COMPLAIN_BRP\" if \"complain-brp\" value passed in",
                  "fullTitle": "BrpComplaint problemExperienced returns \"COMPLAIN_BRP\" if \"complain-brp\" value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'biometric-residence-permit': 'complain-brp'\n}, complaintDetailsBase);\nconst brpComplaint = new BrpComplaint(values);\nexpect(brpComplaint.complaintAttributes.complaint.complaintDetails.problemExperienced).to.eql('COMPLAIN_BRP');",
                  "err": {},
                  "uuid": "268b9412-4d19-416c-8eae-7432e0aefd8b",
                  "parentUUID": "dbabd962-8575-4e41-bbb9-36588f7a8cb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws an error if invalid biometric-residence-permit is passed",
                  "fullTitle": "BrpComplaint problemExperienced throws an error if invalid biometric-residence-permit is passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'biometric-residence-permit': 'invalid'\n}, complaintDetailsBase);\nexpect(() => new BrpComplaint(values)).to.throw('invalid \"biometric-residence-permit\" value');",
                  "err": {},
                  "uuid": "5c5847d0-8b47-4857-809a-dd8df501f489",
                  "parentUUID": "dbabd962-8575-4e41-bbb9-36588f7a8cb6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66021af3-2269-4a36-a8c9-bad4ddb956ee",
                "605d33d8-440f-42f6-94d9-d47d87812509",
                "268b9412-4d19-416c-8eae-7432e0aefd8b",
                "5c5847d0-8b47-4857-809a-dd8df501f489"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5ed89c86-874a-4425-a6bd-bebd2e69e530",
          "title": "Complaint",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
          "file": "/test/unit/lib/json-converters/complaint.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Complaint\"",
              "fullTitle": "Complaint \"before each\" hook in \"Complaint\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const momentStub = sinon.stub().returns({\n      format: () => (creationDate)\n    });\n    Complaint = proxyquire('../../../../apps/ukvi-complaints/lib/json-converters/complaint', {\n      'moment': momentStub\n    });",
              "err": {},
              "uuid": "c018fab9-2a9c-4015-80f3-63c6b5b82e04",
              "parentUUID": "5ed89c86-874a-4425-a6bd-bebd2e69e530",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should have property complaintAttributes which is an object",
              "fullTitle": "Complaint Should have property complaintAttributes which is an object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "complaint = new Complaint(applicantTestValues);\nexpect(complaint.complaintAttributes).to.be.an('object');",
              "err": {},
              "uuid": "74ee1612-d5d3-447d-9dee-8c47657ae9c2",
              "parentUUID": "5ed89c86-874a-4425-a6bd-bebd2e69e530",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "23a0078f-2a1a-4559-a088-760744433772",
              "title": "complaintAttributes",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
              "file": "/test/unit/lib/json-converters/complaint.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should have creationDate set",
                  "fullTitle": "Complaint complaintAttributes Should have creationDate set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "complaint = new Complaint(applicantTestValues);\nexpect(complaint.complaintAttributes.creationDate).to.eql(creationDate);",
                  "err": {},
                  "uuid": "ad980dff-c124-4fa7-9237-d945d405bdf9",
                  "parentUUID": "23a0078f-2a1a-4559-a088-760744433772",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "4ed4faa1-5a21-4984-9a65-7fe5f7862b84",
                  "title": "reporterDetails",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                  "file": "/test/unit/lib/json-converters/complaint.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "32c1e248-67a0-4e45-bc2f-0882855b77e3",
                      "title": "applicant",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                      "file": "/test/unit/lib/json-converters/complaint.spec.js",
                      "beforeHooks": [
                        {
                          "title": "\"before each\" hook in \"applicant\"",
                          "fullTitle": "Complaint complaintAttributes reporterDetails applicant \"before each\" hook in \"applicant\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "reporterDetailsValues = Object.assign({}, applicantTestValues);",
                          "err": {},
                          "uuid": "d3632c34-3653-46f2-881c-11e89f159eff",
                          "parentUUID": "32c1e248-67a0-4e45-bc2f-0882855b77e3",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "Should return applicant details without phone number if not included",
                          "fullTitle": "Complaint complaintAttributes reporterDetails applicant Should return applicant details without phone number if not included",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "complaint = new Complaint(reporterDetailsValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeApplicant,\n  applicantName: testApplicantName,\n  applicantNationality: testApplicantNationality,\n  applicantDob: testApplicantDob,\n  applicantEmail: testApplicantEmail,\n});",
                          "err": {},
                          "uuid": "166f4473-b54b-4ff6-92ec-8a3a10ab04af",
                          "parentUUID": "32c1e248-67a0-4e45-bc2f-0882855b77e3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "Should return applicant details with phone number if included",
                          "fullTitle": "Complaint complaintAttributes reporterDetails applicant Should return applicant details with phone number if included",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "reporterDetailsValues['applicant-phone'] = testApplicantPhone;\ncomplaint = new Complaint(reporterDetailsValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeApplicant,\n  applicantName: testApplicantName,\n  applicantNationality: testApplicantNationality,\n  applicantDob: testApplicantDob,\n  applicantEmail: testApplicantEmail,\n  applicantPhone: testApplicantPhone,\n});",
                          "err": {},
                          "uuid": "eb86d6ef-0a77-4d83-a3a4-d6265235b711",
                          "parentUUID": "32c1e248-67a0-4e45-bc2f-0882855b77e3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "166f4473-b54b-4ff6-92ec-8a3a10ab04af",
                        "eb86d6ef-0a77-4d83-a3a4-d6265235b711"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    },
                    {
                      "uuid": "64d0f905-fa73-4678-80dc-e9f60ac28db2",
                      "title": "agent",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                      "file": "/test/unit/lib/json-converters/complaint.spec.js",
                      "beforeHooks": [
                        {
                          "title": "\"before each\" hook in \"agent\"",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent \"before each\" hook in \"agent\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues = Object.assign({}, agentTestValues);",
                          "err": {},
                          "uuid": "50d7abb1-fcfc-4df7-9dc9-e07999a95116",
                          "parentUUID": "64d0f905-fa73-4678-80dc-e9f60ac28db2",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "it should return agent and applicant details with agentType RELATIVE",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent it should return agent and applicant details with agentType RELATIVE",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['who-representing'] = 'relative';\ncomplaint = new Complaint(agentValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeAgent,\n  applicantDetails: {\n    applicantName: testApplicantName,\n    applicantNationality: testApplicantNationality,\n    applicantDob: testApplicantDob,\n  },\n  agentDetails: {\n    agentName: testAgentName,\n    agentType: 'RELATIVE',\n    agentEmail: testAgentEmail\n  }\n});",
                          "err": {},
                          "uuid": "b84ae0a7-dd4d-42ad-9098-07a62832eff5",
                          "parentUUID": "64d0f905-fa73-4678-80dc-e9f60ac28db2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "it should return agent and applicant details with agentType LEGAL_REP",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent it should return agent and applicant details with agentType LEGAL_REP",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['who-representing'] = 'legal-rep';\ncomplaint = new Complaint(agentValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeAgent,\n  applicantDetails: {\n    applicantName: testApplicantName,\n    applicantNationality: testApplicantNationality,\n    applicantDob: testApplicantDob,\n  },\n  agentDetails: {\n    agentName: testAgentName,\n    agentType: 'LEGAL_REP',\n    agentEmail: testAgentEmail\n  }\n});",
                          "err": {},
                          "uuid": "d0c875c1-1160-4879-ad8f-4722b2c0087a",
                          "parentUUID": "64d0f905-fa73-4678-80dc-e9f60ac28db2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "it should return agent and applicant details with agentType SPONSOR",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent it should return agent and applicant details with agentType SPONSOR",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['who-representing'] = 'sponsor';\ncomplaint = new Complaint(agentValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeAgent,\n  applicantDetails: {\n    applicantName: testApplicantName,\n    applicantNationality: testApplicantNationality,\n    applicantDob: testApplicantDob,\n  },\n  agentDetails: {\n    agentName: testAgentName,\n    agentType: 'SPONSOR',\n    agentEmail: testAgentEmail\n  }\n});",
                          "err": {},
                          "uuid": "1f7aafdf-5879-46ec-b478-3077a14baf30",
                          "parentUUID": "64d0f905-fa73-4678-80dc-e9f60ac28db2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "it should return agent and applicant details with agentType SUPPORT_ORG",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent it should return agent and applicant details with agentType SUPPORT_ORG",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['who-representing'] = 'support-org';\ncomplaint = new Complaint(agentValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeAgent,\n  applicantDetails: {\n    applicantName: testApplicantName,\n    applicantNationality: testApplicantNationality,\n    applicantDob: testApplicantDob,\n  },\n  agentDetails: {\n    agentName: testAgentName,\n    agentType: 'SUPPORT_ORG',\n    agentEmail: testAgentEmail\n  }\n});",
                          "err": {},
                          "uuid": "033964e5-65ef-46fd-902d-4cc69e2e2c5d",
                          "parentUUID": "64d0f905-fa73-4678-80dc-e9f60ac28db2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "Should return agent details with phone number if included",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent Should return agent details with phone number if included",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['agent-phone'] = testAgentPhone;\nagentValues['who-representing'] = 'relative';\ncomplaint = new Complaint(agentValues);\nexpect(complaint.complaintAttributes.complaint.reporterDetails).to.eql({\n  applicantType: applicantTypeAgent,\n  applicantDetails: {\n    applicantName: testApplicantName,\n    applicantNationality: testApplicantNationality,\n    applicantDob: testApplicantDob,\n  },\n  agentDetails: {\n    agentName: testAgentName,\n    agentType: 'RELATIVE',\n    agentEmail: testAgentEmail,\n    agentPhone: testAgentPhone,\n  }\n});",
                          "err": {},
                          "uuid": "99f77e89-382f-44f5-b310-9c14617afb1f",
                          "parentUUID": "64d0f905-fa73-4678-80dc-e9f60ac28db2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "should throw error if incorrect who-representing type specified",
                          "fullTitle": "Complaint complaintAttributes reporterDetails agent should throw error if incorrect who-representing type specified",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "agentValues['who-representing'] = 'error-agent';\nexpect(() => new Complaint(agentValues)).to.throw('invalid \"who-representing\" value');",
                          "err": {},
                          "uuid": "618490c9-10b3-4777-b5f7-5e06d06589c6",
                          "parentUUID": "64d0f905-fa73-4678-80dc-e9f60ac28db2",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b84ae0a7-dd4d-42ad-9098-07a62832eff5",
                        "d0c875c1-1160-4879-ad8f-4722b2c0087a",
                        "1f7aafdf-5879-46ec-b478-3077a14baf30",
                        "033964e5-65ef-46fd-902d-4cc69e2e2c5d",
                        "99f77e89-382f-44f5-b310-9c14617afb1f",
                        "618490c9-10b3-4777-b5f7-5e06d06589c6"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "01c32f8b-8ac2-4a0e-9fb6-293cb74734d6",
                  "title": "reference",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                  "file": "/test/unit/lib/json-converters/complaint.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"reference\"",
                      "fullTitle": "Complaint complaintAttributes reference \"before each\" hook in \"reference\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues = Object.assign({}, applicantTestValues);",
                      "err": {},
                      "uuid": "8bef68ab-067a-4f7a-877d-2b65a3e5e7ec",
                      "parentUUID": "01c32f8b-8ac2-4a0e-9fb6-293cb74734d6",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Does not include a reference if reference-number is not present",
                      "fullTitle": "Complaint complaintAttributes reference Does not include a reference if reference-number is not present",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "complaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint).to.not.have.all.keys('reference');",
                      "err": {},
                      "uuid": "4843fa41-d47b-41f0-9ee1-936cea874124",
                      "parentUUID": "01c32f8b-8ac2-4a0e-9fb6-293cb74734d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Does not include a reference if reference-numbers is specified as \"none\"",
                      "fullTitle": "Complaint complaintAttributes reference Does not include a reference if reference-numbers is specified as \"none\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'none';\ncomplaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint).to.not.have.all.keys('reference');",
                      "err": {},
                      "uuid": "99db14fe-3065-44d5-8964-88dc47d121a1",
                      "parentUUID": "01c32f8b-8ac2-4a0e-9fb6-293cb74734d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "If \"gwf\" reference, reference number will be set on GWF_REF",
                      "fullTitle": "Complaint complaintAttributes reference If \"gwf\" reference, reference number will be set on GWF_REF",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'gwf';\nreferenceValues['gwf-reference'] = testGwfRef;\ncomplaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint.reference).to.eql({\n  referenceType: 'GWF_REF',\n  reference: testGwfRef\n});",
                      "err": {},
                      "uuid": "68e6a947-3b2f-493c-b3ff-0309e9eda916",
                      "parentUUID": "01c32f8b-8ac2-4a0e-9fb6-293cb74734d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "If \"ho\" reference, reference number will be set on HO_REF",
                      "fullTitle": "Complaint complaintAttributes reference If \"ho\" reference, reference number will be set on HO_REF",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'ho';\nreferenceValues['ho-reference'] = testHoRef;\ncomplaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint.reference).to.eql({\n  referenceType: 'HO_REF',\n  reference: testHoRef\n});",
                      "err": {},
                      "uuid": "ca56c6cd-35ce-4161-a9d2-aef6e414ba61",
                      "parentUUID": "01c32f8b-8ac2-4a0e-9fb6-293cb74734d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "If \"ihs\" reference, reference number will be set on IHS_REF",
                      "fullTitle": "Complaint complaintAttributes reference If \"ihs\" reference, reference number will be set on IHS_REF",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'ihs';\nreferenceValues['ihs-reference'] = testIhsRef;\ncomplaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint.reference).to.eql({\n  referenceType: 'IHS_REF',\n  reference: testIhsRef\n});",
                      "err": {},
                      "uuid": "685696dc-20f5-427a-adb3-d59d53679e3f",
                      "parentUUID": "01c32f8b-8ac2-4a0e-9fb6-293cb74734d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "If \"uan\" reference, reference number will be set on UAN_REF",
                      "fullTitle": "Complaint complaintAttributes reference If \"uan\" reference, reference number will be set on UAN_REF",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'uan';\nreferenceValues['uan-reference'] = testUanRef;\ncomplaint = new Complaint(referenceValues);\nexpect(complaint.complaintAttributes.complaint.reference).to.eql({\n  referenceType: 'UAN_REF',\n  reference: testUanRef\n});",
                      "err": {},
                      "uuid": "f3401c70-4336-4d61-a4e1-92d594ca1f4f",
                      "parentUUID": "01c32f8b-8ac2-4a0e-9fb6-293cb74734d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error if incorrect ref type specified",
                      "fullTitle": "Complaint complaintAttributes reference should throw error if incorrect ref type specified",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "referenceValues['reference-numbers'] = 'fff';\nexpect(() => new Complaint(referenceValues)).to.throw('invalid \"reference-numbers\" value');",
                      "err": {},
                      "uuid": "938779d2-8b56-4871-98c7-b79b26fe857e",
                      "parentUUID": "01c32f8b-8ac2-4a0e-9fb6-293cb74734d6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4843fa41-d47b-41f0-9ee1-936cea874124",
                    "99db14fe-3065-44d5-8964-88dc47d121a1",
                    "68e6a947-3b2f-493c-b3ff-0309e9eda916",
                    "ca56c6cd-35ce-4161-a9d2-aef6e414ba61",
                    "685696dc-20f5-427a-adb3-d59d53679e3f",
                    "f3401c70-4336-4d61-a4e1-92d594ca1f4f",
                    "938779d2-8b56-4871-98c7-b79b26fe857e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "7ece1bcf-685c-4d7c-81f6-6eea47d1c614",
                  "title": "complaintDetails",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                  "file": "/test/unit/lib/json-converters/complaint.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "7ecc27c4-dbb2-48c4-a3c9-10d6695a8165",
                      "title": "applicationLocation",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/complaint.spec.js",
                      "file": "/test/unit/lib/json-converters/complaint.spec.js",
                      "beforeHooks": [
                        {
                          "title": "\"before each\" hook in \"applicationLocation\"",
                          "fullTitle": "Complaint complaintAttributes complaintDetails applicationLocation \"before each\" hook in \"applicationLocation\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": null,
                          "speed": null,
                          "pass": false,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "applicationLocationValues = Object.assign({}, applicantTestValues);",
                          "err": {},
                          "uuid": "c034455f-dffa-4dc4-a892-4f7778e5a0f3",
                          "parentUUID": "7ecc27c4-dbb2-48c4-a3c9-10d6695a8165",
                          "isHook": true,
                          "skipped": false
                        }
                      ],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "If no location provided, applicationLocation is not set",
                          "fullTitle": "Complaint complaintAttributes complaintDetails applicationLocation If no location provided, applicationLocation is not set",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "complaint = new Complaint(applicationLocationValues);\nexpect(complaint.complaintAttributes.complaint.complaintDetails).to.not.have.all.keys('applicationLocation');",
                          "err": {},
                          "uuid": "b9912c5e-2d6d-4675-86e0-5f365988abe0",
                          "parentUUID": "7ecc27c4-dbb2-48c4-a3c9-10d6695a8165",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "If applied from \"inside-uk\", applicationLocation set to INSIDE_UK",
                          "fullTitle": "Complaint complaintAttributes complaintDetails applicationLocation If applied from \"inside-uk\", applicationLocation set to INSIDE_UK",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "applicationLocationValues['where-applied-from'] = 'inside-uk';\ncomplaint = new Complaint(applicationLocationValues);\nexpect(complaint.complaintAttributes.complaint.complaintDetails.applicationLocation).to.eql('INSIDE_UK');",
                          "err": {},
                          "uuid": "0ed5f125-6e52-42db-aa0f-ec764f77ae4f",
                          "parentUUID": "7ecc27c4-dbb2-48c4-a3c9-10d6695a8165",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "If applied from \"outside-uk\", applicationLocation set to OUTSIDE_UK",
                          "fullTitle": "Complaint complaintAttributes complaintDetails applicationLocation If applied from \"outside-uk\", applicationLocation set to OUTSIDE_UK",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "applicationLocationValues['where-applied-from'] = 'outside-uk';\ncomplaint = new Complaint(applicationLocationValues);\nexpect(complaint.complaintAttributes.complaint.complaintDetails.applicationLocation).to.eql('OUTSIDE_UK');",
                          "err": {},
                          "uuid": "4cf1fdf9-3b21-4bd1-a392-e98588543157",
                          "parentUUID": "7ecc27c4-dbb2-48c4-a3c9-10d6695a8165",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "It throws an error if invalid \"where-applied-from\"",
                          "fullTitle": "Complaint complaintAttributes complaintDetails applicationLocation It throws an error if invalid \"where-applied-from\"",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "applicationLocationValues['where-applied-from'] = 'location';\nexpect(() => new Complaint(applicationLocationValues)).to.throw('invalid \"where-applied-from\" value');",
                          "err": {},
                          "uuid": "692e1ab0-40ea-4634-a60e-20d7d0585e18",
                          "parentUUID": "7ecc27c4-dbb2-48c4-a3c9-10d6695a8165",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b9912c5e-2d6d-4675-86e0-5f365988abe0",
                        "0ed5f125-6e52-42db-aa0f-ec764f77ae4f",
                        "4cf1fdf9-3b21-4bd1-a392-e98588543157",
                        "692e1ab0-40ea-4634-a60e-20d7d0585e18"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "ad980dff-c124-4fa7-9237-d945d405bdf9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "74ee1612-d5d3-447d-9dee-8c47657ae9c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3d775829-097d-4a3a-8a03-49e1ef43f6e9",
          "title": "DecisionComplaint",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/decision.spec.js",
          "file": "/test/unit/lib/json-converters/decision.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "79ccaae4-920e-4ee1-9095-94a2122ff1c5",
              "title": "decisionOutcome",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/decision.spec.js",
              "file": "/test/unit/lib/json-converters/decision.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns \"NEGATIVE\" if \"negative\" decision-outcome value passed in",
                  "fullTitle": "DecisionComplaint decisionOutcome returns \"NEGATIVE\" if \"negative\" decision-outcome value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'decision-outcome': 'negative'\n}, complaintDetailsBase);\nconst decisionComplaint = new DecisionComplaint(values);\nexpect(decisionComplaint.complaintAttributes.complaint.complaintDetails.decisionOutcome).to.eql('NEGATIVE');",
                  "err": {},
                  "uuid": "8558921a-8afe-4fd1-b0ee-242722700d85",
                  "parentUUID": "79ccaae4-920e-4ee1-9095-94a2122ff1c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"POSITIVE\" if \"positive\" decision-outcome value passed in",
                  "fullTitle": "DecisionComplaint decisionOutcome returns \"POSITIVE\" if \"positive\" decision-outcome value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'decision-outcome': 'positive'\n}, complaintDetailsBase);\nconst decisionComplaint = new DecisionComplaint(values);\nexpect(decisionComplaint.complaintAttributes.complaint.complaintDetails.decisionOutcome).to.eql('POSITIVE');",
                  "err": {},
                  "uuid": "8223780c-aee8-4de8-b7a1-def6836b0551",
                  "parentUUID": "79ccaae4-920e-4ee1-9095-94a2122ff1c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws an error if invalid decision-outcome is passed",
                  "fullTitle": "DecisionComplaint decisionOutcome throws an error if invalid decision-outcome is passed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'decision-outcome': 'invalid'\n}, complaintDetailsBase);\nexpect(() => new DecisionComplaint(values)).to.throw('invalid \"decision-outcome\" value');",
                  "err": {},
                  "uuid": "994ee8cf-a208-4742-bfa2-dc85c5d6ec56",
                  "parentUUID": "79ccaae4-920e-4ee1-9095-94a2122ff1c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8558921a-8afe-4fd1-b0ee-242722700d85",
                "8223780c-aee8-4de8-b7a1-def6836b0551",
                "994ee8cf-a208-4742-bfa2-dc85c5d6ec56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5588f8a8-5355-4d28-a606-96c507bbe2f9",
          "title": "DelaysComplaint",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/delays.spec.js",
          "file": "/test/unit/lib/json-converters/delays.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "96920ff7-0ddb-48c1-85c3-ab7e55917571",
              "title": "delayedWaitingFor",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/delays.spec.js",
              "file": "/test/unit/lib/json-converters/delays.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns \"APPLICATION_DELAY\" if \"application-delay\" delay-type value passed in",
                  "fullTitle": "DelaysComplaint delayedWaitingFor returns \"APPLICATION_DELAY\" if \"application-delay\" delay-type value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'delay-type': 'application-delay'\n}, complaintDetailsBase);\nconst delaysComplaint = new DelaysComplaint(values);\nexpect(\n  delaysComplaint.complaintAttributes.complaint.complaintDetails.delayedWaitingFor\n  ).to.eql('APPLICATION_DELAY');",
                  "err": {},
                  "uuid": "0146e052-e827-4332-9976-e45dceb4c9e3",
                  "parentUUID": "96920ff7-0ddb-48c1-85c3-ab7e55917571",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"RETURN_OF_DOCUMENTS\" if \"return-of-documents\" delay-type value passed in",
                  "fullTitle": "DelaysComplaint delayedWaitingFor returns \"RETURN_OF_DOCUMENTS\" if \"return-of-documents\" delay-type value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'delay-type': 'return-of-documents'\n}, complaintDetailsBase);\nconst delaysComplaint = new DelaysComplaint(values);\nexpect(\n  delaysComplaint.complaintAttributes.complaint.complaintDetails.delayedWaitingFor\n  ).to.eql('RETURN_OF_DOCUMENTS');",
                  "err": {},
                  "uuid": "81474855-7783-4d15-a790-79b84a829860",
                  "parentUUID": "96920ff7-0ddb-48c1-85c3-ab7e55917571",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws an error if invalid delay-type is passed",
                  "fullTitle": "DelaysComplaint delayedWaitingFor throws an error if invalid delay-type is passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'delay-type': 'invalid'\n}, complaintDetailsBase);\nexpect(() => new DelaysComplaint(values)).to.throw('invalid \"delay-type\" value');",
                  "err": {},
                  "uuid": "883c4989-efa1-49be-8385-599a9f33a0f7",
                  "parentUUID": "96920ff7-0ddb-48c1-85c3-ab7e55917571",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0146e052-e827-4332-9976-e45dceb4c9e3",
                "81474855-7783-4d15-a790-79b84a829860",
                "883c4989-efa1-49be-8385-599a9f33a0f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb41fe36-0950-4bdf-bc80-9978413e3016",
              "title": "documentReturnRequest",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/delays.spec.js",
              "file": "/test/unit/lib/json-converters/delays.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns \"YES_OTHER\" if \"yes-other\" return-of-documents value passed in",
                  "fullTitle": "DelaysComplaint documentReturnRequest returns \"YES_OTHER\" if \"yes-other\" return-of-documents value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'delay-type': 'return-of-documents',\n  'return-of-documents': 'yes-other'\n}, complaintDetailsBase);\nconst delaysComplaint = new DelaysComplaint(values);\nexpect(\n  delaysComplaint.complaintAttributes.complaint.complaintDetails.documentReturnRequest\n  ).to.eql('YES_OTHER');",
                  "err": {},
                  "uuid": "a4d1fb43-2db1-457f-9f74-426cde191396",
                  "parentUUID": "bb41fe36-0950-4bdf-bc80-9978413e3016",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"YES_DOCS_SERVICE\" if \"yes-docs-service\" return-of-documents value passed in",
                  "fullTitle": "DelaysComplaint documentReturnRequest returns \"YES_DOCS_SERVICE\" if \"yes-docs-service\" return-of-documents value passed in",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'delay-type': 'return-of-documents',\n  'return-of-documents': 'yes-docs-service'\n}, complaintDetailsBase);\nconst delaysComplaint = new DelaysComplaint(values);\nexpect(\n  delaysComplaint.complaintAttributes.complaint.complaintDetails.documentReturnRequest\n  ).to.eql('YES_DOCS_SERVICE');",
                  "err": {},
                  "uuid": "71b8688c-de1f-4264-a568-75733af3a8e7",
                  "parentUUID": "bb41fe36-0950-4bdf-bc80-9978413e3016",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"NO\" if \"yes-docs-service\" return-of-documents value passed in",
                  "fullTitle": "DelaysComplaint documentReturnRequest returns \"NO\" if \"yes-docs-service\" return-of-documents value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'delay-type': 'return-of-documents',\n  'return-of-documents': 'no'\n}, complaintDetailsBase);\nconst delaysComplaint = new DelaysComplaint(values);\nexpect(\n  delaysComplaint.complaintAttributes.complaint.complaintDetails.documentReturnRequest\n  ).to.eql('NO');",
                  "err": {},
                  "uuid": "91d0dc62-fc38-4acd-9086-5984700d95cc",
                  "parentUUID": "bb41fe36-0950-4bdf-bc80-9978413e3016",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws an error if invalid return-of-documents is passed",
                  "fullTitle": "DelaysComplaint documentReturnRequest throws an error if invalid return-of-documents is passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'delay-type': 'return-of-documents',\n  'return-of-documents': 'invalid'\n}, complaintDetailsBase);\nexpect(() => new DelaysComplaint(values)).to.throw('invalid \"return-of-documents\" value');",
                  "err": {},
                  "uuid": "e9382360-3e75-4025-8191-0e91b4e0d917",
                  "parentUUID": "bb41fe36-0950-4bdf-bc80-9978413e3016",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4d1fb43-2db1-457f-9f74-426cde191396",
                "71b8688c-de1f-4264-a568-75733af3a8e7",
                "91d0dc62-fc38-4acd-9086-5984700d95cc",
                "e9382360-3e75-4025-8191-0e91b4e0d917"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "98682a4a-0ce9-4acc-9433-4105c9c22faa",
          "title": "ExistingComplaint",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/existing.spec.js",
          "file": "/test/unit/lib/json-converters/existing.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a363af39-9885-410f-8374-e9f04523098a",
              "title": "previousComplaint",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/existing.spec.js",
              "file": "/test/unit/lib/json-converters/existing.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns complaint reference number if \"yes\" existing-complaint value passed in",
                  "fullTitle": "ExistingComplaint previousComplaint returns complaint reference number if \"yes\" existing-complaint value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const refNumber = '23456789o0p9';\nconst values = Object.assign({\n  'existing-complaint': 'yes',\n  'complaint-reference-number': refNumber\n}, complaintDetailsBase);\nconst existingComplaint = new ExistingComplaint(values);\nexpect(\n  existingComplaint.complaintAttributes.complaint.complaintDetails.previousComplaint.complaintReferenceNumber\n  ).to.eql(refNumber);",
                  "err": {},
                  "uuid": "2f1c66cf-002c-40a0-ae94-09996d779712",
                  "parentUUID": "a363af39-9885-410f-8374-e9f04523098a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws an error if invalid existing-complaint value is passed",
                  "fullTitle": "ExistingComplaint previousComplaint throws an error if invalid existing-complaint value is passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'existing-complaint': 'invalid'\n}, complaintDetailsBase);\nexpect(() => new ExistingComplaint(values)).to.throw('invalid \"existing-complaint\" value');",
                  "err": {},
                  "uuid": "0d017b78-d45b-45d8-b6ce-5858f9df4b42",
                  "parentUUID": "a363af39-9885-410f-8374-e9f04523098a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "77a781f0-f9ae-4f85-b349-4d94ef070cbc",
                  "title": "previousComplaintType",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/existing.spec.js",
                  "file": "/test/unit/lib/json-converters/existing.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns \"SUBMITTING_APPLICATION\" if \"immigration-application\" complaint-reason-previous value passed in",
                      "fullTitle": "ExistingComplaint previousComplaint previousComplaintType returns \"SUBMITTING_APPLICATION\" if \"immigration-application\" complaint-reason-previous value passed in",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  'existing-complaint': 'no',\n  'complaint-reason-previous': 'immigration-application'\n}, complaintDetailsBase);\nconst existingComplaint = new ExistingComplaint(values);\nexpect(\n  existingComplaint.complaintAttributes.complaint.complaintDetails.previousComplaint.previousComplaintType\n  ).to.eql('SUBMITTING_APPLICATION');",
                      "err": {},
                      "uuid": "addfe173-5926-44ee-b6c6-fa034329643f",
                      "parentUUID": "77a781f0-f9ae-4f85-b349-4d94ef070cbc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns \"MAKING_APPOINTMENT\" if \"immigration-appointment\" complaint-reason-previous value passed in",
                      "fullTitle": "ExistingComplaint previousComplaint previousComplaintType returns \"MAKING_APPOINTMENT\" if \"immigration-appointment\" complaint-reason-previous value passed in",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  'existing-complaint': 'no',\n  'complaint-reason-previous': 'immigration-appointment'\n}, complaintDetailsBase);\nconst existingComplaint = new ExistingComplaint(values);\nexpect(\n  existingComplaint.complaintAttributes.complaint.complaintDetails.previousComplaint.previousComplaintType\n  ).to.eql('MAKING_APPOINTMENT');",
                      "err": {},
                      "uuid": "e42f1e28-d976-4be5-a37c-a8516f15e69c",
                      "parentUUID": "77a781f0-f9ae-4f85-b349-4d94ef070cbc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns \"DELAYS\" if \"delays\" complaint-reason-previous value passed in",
                      "fullTitle": "ExistingComplaint previousComplaint previousComplaintType returns \"DELAYS\" if \"delays\" complaint-reason-previous value passed in",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  'existing-complaint': 'no',\n  'complaint-reason-previous': 'delays'\n}, complaintDetailsBase);\nconst existingComplaint = new ExistingComplaint(values);\nexpect(\n  existingComplaint.complaintAttributes.complaint.complaintDetails.previousComplaint.previousComplaintType\n  ).to.eql('DELAYS');",
                      "err": {},
                      "uuid": "cca92846-50e5-4329-8fc4-7fb4a54bfb73",
                      "parentUUID": "77a781f0-f9ae-4f85-b349-4d94ef070cbc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns \"BIOMETRIC_RESIDENCE_PERMIT\" if \"biometric-residence-permit\" complaint-reason-previous value passed in",
                      "fullTitle": "ExistingComplaint previousComplaint previousComplaintType returns \"BIOMETRIC_RESIDENCE_PERMIT\" if \"biometric-residence-permit\" complaint-reason-previous value passed in",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  'existing-complaint': 'no',\n  'complaint-reason-previous': 'biometric-residence-permit'\n}, complaintDetailsBase);\nconst existingComplaint = new ExistingComplaint(values);\nexpect(\n  existingComplaint.complaintAttributes.complaint.complaintDetails.previousComplaint.previousComplaintType\n  ).to.eql('BIOMETRIC_RESIDENCE_PERMIT');",
                      "err": {},
                      "uuid": "bbe6ccfa-ec7a-450c-a5cd-141875af723c",
                      "parentUUID": "77a781f0-f9ae-4f85-b349-4d94ef070cbc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns \"IMMIGRATION_DECISION\" if \"immigration-decision\" complaint-reason-previous value passed in",
                      "fullTitle": "ExistingComplaint previousComplaint previousComplaintType returns \"IMMIGRATION_DECISION\" if \"immigration-decision\" complaint-reason-previous value passed in",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  'existing-complaint': 'no',\n  'complaint-reason-previous': 'immigration-decision'\n}, complaintDetailsBase);\nconst existingComplaint = new ExistingComplaint(values);\nexpect(\n  existingComplaint.complaintAttributes.complaint.complaintDetails.previousComplaint.previousComplaintType\n  ).to.eql('IMMIGRATION_DECISION');",
                      "err": {},
                      "uuid": "6eefe118-bc9c-42c6-b484-47872c5866fa",
                      "parentUUID": "77a781f0-f9ae-4f85-b349-4d94ef070cbc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns \"IMMIGRATION_STATUS_CHANGE\" if \"immigration-status-change\" complaint-reason-previous value passed in",
                      "fullTitle": "ExistingComplaint previousComplaint previousComplaintType returns \"IMMIGRATION_STATUS_CHANGE\" if \"immigration-status-change\" complaint-reason-previous value passed in",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  'existing-complaint': 'no',\n  'complaint-reason-previous': 'immigration-status-change'\n}, complaintDetailsBase);\nconst existingComplaint = new ExistingComplaint(values);\nexpect(\n  existingComplaint.complaintAttributes.complaint.complaintDetails.previousComplaint.previousComplaintType\n  ).to.eql('IMMIGRATION_STATUS_CHANGE');",
                      "err": {},
                      "uuid": "0e4279cc-e7bf-4484-9308-b64b660c2dc4",
                      "parentUUID": "77a781f0-f9ae-4f85-b349-4d94ef070cbc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns \"REFUND\" if \"refund\" complaint-reason-previous value passed in",
                      "fullTitle": "ExistingComplaint previousComplaint previousComplaintType returns \"REFUND\" if \"refund\" complaint-reason-previous value passed in",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  'existing-complaint': 'no',\n  'complaint-reason-previous': 'refund'\n}, complaintDetailsBase);\nconst existingComplaint = new ExistingComplaint(values);\nexpect(\n  existingComplaint.complaintAttributes.complaint.complaintDetails.previousComplaint.previousComplaintType\n  ).to.eql('REFUND');",
                      "err": {},
                      "uuid": "6fb10f9f-258f-400e-8c40-e4544eda1b60",
                      "parentUUID": "77a781f0-f9ae-4f85-b349-4d94ef070cbc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns \"POOR_INFORMATION_OR_STAFF_BEHAVIOUR\" if \"staff-behaviour\" complaint-reason-previous value passed in",
                      "fullTitle": "ExistingComplaint previousComplaint previousComplaintType returns \"POOR_INFORMATION_OR_STAFF_BEHAVIOUR\" if \"staff-behaviour\" complaint-reason-previous value passed in",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  'existing-complaint': 'no',\n  'complaint-reason-previous': 'staff-behaviour'\n}, complaintDetailsBase);\nconst existingComplaint = new ExistingComplaint(values);\nexpect(\n  existingComplaint.complaintAttributes.complaint.complaintDetails.previousComplaint.previousComplaintType\n  ).to.eql('POOR_INFORMATION_OR_STAFF_BEHAVIOUR');",
                      "err": {},
                      "uuid": "f4fcb520-92c0-496f-8901-9e3928e60337",
                      "parentUUID": "77a781f0-f9ae-4f85-b349-4d94ef070cbc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns \"SOMETHING_ELSE\" if \"other-complaint\" complaint-reason-previous value passed in",
                      "fullTitle": "ExistingComplaint previousComplaint previousComplaintType returns \"SOMETHING_ELSE\" if \"other-complaint\" complaint-reason-previous value passed in",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  'existing-complaint': 'no',\n  'complaint-reason-previous': 'other-complaint'\n}, complaintDetailsBase);\nconst existingComplaint = new ExistingComplaint(values);\nexpect(\n  existingComplaint.complaintAttributes.complaint.complaintDetails.previousComplaint.previousComplaintType\n  ).to.eql('SOMETHING_ELSE');",
                      "err": {},
                      "uuid": "f94ffab4-9edd-4ed7-9eae-a56fa3b16a4f",
                      "parentUUID": "77a781f0-f9ae-4f85-b349-4d94ef070cbc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws an error if invalid complaint-reason-previous value is passed",
                      "fullTitle": "ExistingComplaint previousComplaint previousComplaintType throws an error if invalid complaint-reason-previous value is passed",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  'existing-complaint': 'no',\n  'complaint-reason-previous': 'invalid'\n}, complaintDetailsBase);\nexpect(() => new ExistingComplaint(values)).to.throw('invalid \"complaint-reason-previous\" value');",
                      "err": {},
                      "uuid": "19d8a924-a359-4198-b9a4-f0f6d3c99216",
                      "parentUUID": "77a781f0-f9ae-4f85-b349-4d94ef070cbc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "addfe173-5926-44ee-b6c6-fa034329643f",
                    "e42f1e28-d976-4be5-a37c-a8516f15e69c",
                    "cca92846-50e5-4329-8fc4-7fb4a54bfb73",
                    "bbe6ccfa-ec7a-450c-a5cd-141875af723c",
                    "6eefe118-bc9c-42c6-b484-47872c5866fa",
                    "0e4279cc-e7bf-4484-9308-b64b660c2dc4",
                    "6fb10f9f-258f-400e-8c40-e4544eda1b60",
                    "f4fcb520-92c0-496f-8901-9e3928e60337",
                    "f94ffab4-9edd-4ed7-9eae-a56fa3b16a4f",
                    "19d8a924-a359-4198-b9a4-f0f6d3c99216"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "2f1c66cf-002c-40a0-ae94-09996d779712",
                "0d017b78-d45b-45d8-b6ce-5858f9df4b42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ccf16ef9-0ccc-4867-9b7d-d265049d24f1",
          "title": "MakingAppointmentComplaint",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/making-appointment.spec.js",
          "file": "/test/unit/lib/json-converters/making-appointment.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0d03933b-c295-44ff-b63f-562ec740744f",
              "title": "problemExperienced",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/making-appointment.spec.js",
              "file": "/test/unit/lib/json-converters/making-appointment.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns \"LACK_AVAILABILITY\" if \"lack-availability\" immigration-appointment value passed in",
                  "fullTitle": "MakingAppointmentComplaint problemExperienced returns \"LACK_AVAILABILITY\" if \"lack-availability\" immigration-appointment value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'immigration-appointment': 'lack-availability',\n}, complaintDetailsBase);\nconst makingAppointmentComplaint = new MakingAppointmentComplaint(values);\nexpect(\n  makingAppointmentComplaint.complaintAttributes.complaint.complaintDetails.problemExperienced\n  ).to.eql('LACK_AVAILABILITY');",
                  "err": {},
                  "uuid": "7147c80a-5e7f-474f-acb4-7bd6c6f61ba0",
                  "parentUUID": "0d03933b-c295-44ff-b63f-562ec740744f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"CHANGE_APPOINTMENT\" if \"change-appointment\" immigration-appointment value passed in",
                  "fullTitle": "MakingAppointmentComplaint problemExperienced returns \"CHANGE_APPOINTMENT\" if \"change-appointment\" immigration-appointment value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'immigration-appointment': 'change-appointment',\n}, complaintDetailsBase);\nconst makingAppointmentComplaint = new MakingAppointmentComplaint(values);\nexpect(\n  makingAppointmentComplaint.complaintAttributes.complaint.complaintDetails.problemExperienced\n  ).to.eql('CHANGE_APPOINTMENT');",
                  "err": {},
                  "uuid": "155a6d9c-8bc6-4a5b-90c7-489558166459",
                  "parentUUID": "0d03933b-c295-44ff-b63f-562ec740744f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"TECHNICAL_APPOINTMENTS\" if \"technical-appointments\" immigration-appointment value passed in",
                  "fullTitle": "MakingAppointmentComplaint problemExperienced returns \"TECHNICAL_APPOINTMENTS\" if \"technical-appointments\" immigration-appointment value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'immigration-appointment': 'technical-appointments',\n}, complaintDetailsBase);\nconst makingAppointmentComplaint = new MakingAppointmentComplaint(values);\nexpect(\n  makingAppointmentComplaint.complaintAttributes.complaint.complaintDetails.problemExperienced\n  ).to.eql('TECHNICAL_APPOINTMENTS');",
                  "err": {},
                  "uuid": "4216690b-f094-46cc-aef4-3861cb4acd8a",
                  "parentUUID": "0d03933b-c295-44ff-b63f-562ec740744f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"QUESTIONS_APPOINTMENTS\" if \"questions-appointments\" immigration-appointment value passed in",
                  "fullTitle": "MakingAppointmentComplaint problemExperienced returns \"QUESTIONS_APPOINTMENTS\" if \"questions-appointments\" immigration-appointment value passed in",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'immigration-appointment': 'questions-appointments',\n}, complaintDetailsBase);\nconst makingAppointmentComplaint = new MakingAppointmentComplaint(values);\nexpect(\n  makingAppointmentComplaint.complaintAttributes.complaint.complaintDetails.problemExperienced\n  ).to.eql('QUESTIONS_APPOINTMENTS');",
                  "err": {},
                  "uuid": "177d41b3-f2ef-4305-8c53-860b769a74b6",
                  "parentUUID": "0d03933b-c295-44ff-b63f-562ec740744f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"COMPLAIN_APPOINTMENTS\" if \"complain-appointments\" immigration-appointment value passed in",
                  "fullTitle": "MakingAppointmentComplaint problemExperienced returns \"COMPLAIN_APPOINTMENTS\" if \"complain-appointments\" immigration-appointment value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'immigration-appointment': 'complain-appointments',\n}, complaintDetailsBase);\nconst makingAppointmentComplaint = new MakingAppointmentComplaint(values);\nexpect(\n  makingAppointmentComplaint.complaintAttributes.complaint.complaintDetails.problemExperienced\n  ).to.eql('COMPLAIN_APPOINTMENTS');",
                  "err": {},
                  "uuid": "225199e3-afed-455b-b25a-f065a0553058",
                  "parentUUID": "0d03933b-c295-44ff-b63f-562ec740744f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws an error if invalid immigration-appointment is passed",
                  "fullTitle": "MakingAppointmentComplaint problemExperienced throws an error if invalid immigration-appointment is passed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'immigration-appointment': 'invalid'\n}, complaintDetailsBase);\nexpect(() => new MakingAppointmentComplaint(values)).to.throw('invalid \"immigration-appointment\" value');",
                  "err": {},
                  "uuid": "3262a4e9-287c-4933-acd8-7f289c5e2bf3",
                  "parentUUID": "0d03933b-c295-44ff-b63f-562ec740744f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7147c80a-5e7f-474f-acb4-7bd6c6f61ba0",
                "155a6d9c-8bc6-4a5b-90c7-489558166459",
                "4216690b-f094-46cc-aef4-3861cb4acd8a",
                "177d41b3-f2ef-4305-8c53-860b769a74b6",
                "225199e3-afed-455b-b25a-f065a0553058",
                "3262a4e9-287c-4933-acd8-7f289c5e2bf3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9824339d-20a4-40ab-aeaa-031fd839911f",
          "title": "RefundComplaint",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/refund.spec.js",
          "file": "/test/unit/lib/json-converters/refund.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c6b7761b-20b6-497f-b601-b9b5f64f0c3f",
              "title": "refundRequested",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/refund.spec.js",
              "file": "/test/unit/lib/json-converters/refund.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns \"NO\" if \"no\" refund value passed in",
                  "fullTitle": "RefundComplaint refundRequested returns \"NO\" if \"no\" refund value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'refund': 'no',\n}, complaintDetailsBase);\nconst refundComplaint = new RefundComplaint(values);\nexpect(\n  refundComplaint.complaintAttributes.complaint.complaintDetails.refundRequested\n  ).to.eql('NO');",
                  "err": {},
                  "uuid": "31f8979e-9353-432b-88b7-ee2acee2edde",
                  "parentUUID": "c6b7761b-20b6-497f-b601-b9b5f64f0c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"YES\" if \"yes\" refund value passed in",
                  "fullTitle": "RefundComplaint refundRequested returns \"YES\" if \"yes\" refund value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'refund': 'yes',\n}, complaintDetailsBase);\nconst refundComplaint = new RefundComplaint(values);\nexpect(\n  refundComplaint.complaintAttributes.complaint.complaintDetails.refundRequested\n  ).to.eql('YES');",
                  "err": {},
                  "uuid": "836cfd1c-83b0-4cda-845d-383e81b20a73",
                  "parentUUID": "c6b7761b-20b6-497f-b601-b9b5f64f0c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"NOT_YET\" if \"not-yet\" refund value passed in",
                  "fullTitle": "RefundComplaint refundRequested returns \"NOT_YET\" if \"not-yet\" refund value passed in",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'refund': 'not-yet',\n}, complaintDetailsBase);\nconst refundComplaint = new RefundComplaint(values);\nexpect(\n  refundComplaint.complaintAttributes.complaint.complaintDetails.refundRequested\n  ).to.eql('NOT_YET');",
                  "err": {},
                  "uuid": "0dcbebba-5ae9-4687-87ed-36947c11c521",
                  "parentUUID": "c6b7761b-20b6-497f-b601-b9b5f64f0c3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws an error if invalid refund value is passed",
                  "fullTitle": "RefundComplaint refundRequested throws an error if invalid refund value is passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'refund': 'invalid'\n}, complaintDetailsBase);\nexpect(() => new RefundComplaint(values)).to.throw('invalid \"refund\" value');",
                  "err": {},
                  "uuid": "a1e01085-29ee-4ba2-9a5c-2545ca94fffb",
                  "parentUUID": "c6b7761b-20b6-497f-b601-b9b5f64f0c3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31f8979e-9353-432b-88b7-ee2acee2edde",
                "836cfd1c-83b0-4cda-845d-383e81b20a73",
                "0dcbebba-5ae9-4687-87ed-36947c11c521",
                "a1e01085-29ee-4ba2-9a5c-2545ca94fffb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fbb4e1f6-0f27-4ec5-b80c-adc5bf906462",
              "title": "refundType",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/refund.spec.js",
              "file": "/test/unit/lib/json-converters/refund.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns \"STANDARD\" if \"standard\" refund-type value passed in",
                  "fullTitle": "RefundComplaint refundType returns \"STANDARD\" if \"standard\" refund-type value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'refund': 'yes',\n  'refund-type': 'standard',\n}, complaintDetailsBase);\nconst refundComplaint = new RefundComplaint(values);\nexpect(\n  refundComplaint.complaintAttributes.complaint.complaintDetails.refundType\n  ).to.eql('STANDARD');",
                  "err": {},
                  "uuid": "e77b6ccd-b130-4be9-94a9-f79513871128",
                  "parentUUID": "fbb4e1f6-0f27-4ec5-b80c-adc5bf906462",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"PRIORITY\" if \"priority\" refund-type value passed in",
                  "fullTitle": "RefundComplaint refundType returns \"PRIORITY\" if \"priority\" refund-type value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'refund': 'yes',\n  'refund-type': 'priority',\n}, complaintDetailsBase);\nconst refundComplaint = new RefundComplaint(values);\nexpect(\n  refundComplaint.complaintAttributes.complaint.complaintDetails.refundType\n  ).to.eql('PRIORITY');",
                  "err": {},
                  "uuid": "5b6925cd-a286-43a5-aa55-a29bcf84a898",
                  "parentUUID": "fbb4e1f6-0f27-4ec5-b80c-adc5bf906462",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"SUPER_PRIORITY\" if \"super-priority\" refund-type value passed in",
                  "fullTitle": "RefundComplaint refundType returns \"SUPER_PRIORITY\" if \"super-priority\" refund-type value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'refund': 'yes',\n  'refund-type': 'super-priority',\n}, complaintDetailsBase);\nconst refundComplaint = new RefundComplaint(values);\nexpect(\n  refundComplaint.complaintAttributes.complaint.complaintDetails.refundType\n  ).to.eql('SUPER_PRIORITY');",
                  "err": {},
                  "uuid": "8cf20468-1d11-4910-9280-a3913306d0a4",
                  "parentUUID": "fbb4e1f6-0f27-4ec5-b80c-adc5bf906462",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"PREMIUM\" if \"premium\" refund-type value passed in",
                  "fullTitle": "RefundComplaint refundType returns \"PREMIUM\" if \"premium\" refund-type value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'refund': 'yes',\n  'refund-type': 'premium',\n}, complaintDetailsBase);\nconst refundComplaint = new RefundComplaint(values);\nexpect(\n  refundComplaint.complaintAttributes.complaint.complaintDetails.refundType\n  ).to.eql('PREMIUM');",
                  "err": {},
                  "uuid": "7c60f52f-8b0c-4acc-9a68-85f9b1055eb9",
                  "parentUUID": "fbb4e1f6-0f27-4ec5-b80c-adc5bf906462",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"IHS\" if \"ihs\" refund-type value passed in",
                  "fullTitle": "RefundComplaint refundType returns \"IHS\" if \"ihs\" refund-type value passed in",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'refund': 'yes',\n  'refund-type': 'ihs',\n}, complaintDetailsBase);\nconst refundComplaint = new RefundComplaint(values);\nexpect(\n  refundComplaint.complaintAttributes.complaint.complaintDetails.refundType\n  ).to.eql('IHS');",
                  "err": {},
                  "uuid": "82cca6c1-6c2f-4dd3-8400-4adf5051a132",
                  "parentUUID": "fbb4e1f6-0f27-4ec5-b80c-adc5bf906462",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"EU_SETTLEMENT\" if \"eu-settlement\" refund-type value passed in",
                  "fullTitle": "RefundComplaint refundType returns \"EU_SETTLEMENT\" if \"eu-settlement\" refund-type value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'refund': 'yes',\n  'refund-type': 'eu-settlement',\n}, complaintDetailsBase);\nconst refundComplaint = new RefundComplaint(values);\nexpect(\n  refundComplaint.complaintAttributes.complaint.complaintDetails.refundType\n  ).to.eql('EU_SETTLEMENT');",
                  "err": {},
                  "uuid": "e1003421-1b10-4c5b-951e-4312d982b89b",
                  "parentUUID": "fbb4e1f6-0f27-4ec5-b80c-adc5bf906462",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws an error if invalid refund-type is passed",
                  "fullTitle": "RefundComplaint refundType throws an error if invalid refund-type is passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'refund': 'yes',\n  'refund-type': 'invalid'\n}, complaintDetailsBase);\nexpect(() => new RefundComplaint(values)).to.throw('invalid \"refund-type\" value');",
                  "err": {},
                  "uuid": "bf811d7d-75f5-478e-ba5e-1fb2d420a56a",
                  "parentUUID": "fbb4e1f6-0f27-4ec5-b80c-adc5bf906462",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e77b6ccd-b130-4be9-94a9-f79513871128",
                "5b6925cd-a286-43a5-aa55-a29bcf84a898",
                "8cf20468-1d11-4910-9280-a3913306d0a4",
                "7c60f52f-8b0c-4acc-9a68-85f9b1055eb9",
                "82cca6c1-6c2f-4dd3-8400-4adf5051a132",
                "e1003421-1b10-4c5b-951e-4312d982b89b",
                "bf811d7d-75f5-478e-ba5e-1fb2d420a56a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bbe0ac61-c4ca-4c88-9996-079d3096b5dd",
          "title": "StaffBehaviourComplaint",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/staff-behaviour.spec.js",
          "file": "/test/unit/lib/json-converters/staff-behaviour.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dc592b65-ed97-45d3-9bdc-28357151ffd4",
              "title": "experience",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/staff-behaviour.spec.js",
              "file": "/test/unit/lib/json-converters/staff-behaviour.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "throws an error if invalid staff-behaviour is passed",
                  "fullTitle": "StaffBehaviourComplaint experience throws an error if invalid staff-behaviour is passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'staff-behaviour': 'invalid',\n}, complaintDetailsBase);\nexpect(() => new StaffBehaviourComplaint(values)).to.throw('invalid \"staff-behaviour\" value');",
                  "err": {},
                  "uuid": "07ed1fde-6462-4972-baed-faed0334bc77",
                  "parentUUID": "dc592b65-ed97-45d3-9bdc-28357151ffd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "33a6876b-06a2-46b9-9441-a292267db650",
                  "title": "face-to-face",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/staff-behaviour.spec.js",
                  "file": "/test/unit/lib/json-converters/staff-behaviour.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "1545da28-fbdd-435a-857c-fa3e9c5f4e1a",
                      "title": "which-centre",
                      "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/staff-behaviour.spec.js",
                      "file": "/test/unit/lib/json-converters/staff-behaviour.spec.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "returns vac location information if \"vac\" which-centre value passed in",
                          "fullTitle": "StaffBehaviourComplaint experience face-to-face which-centre returns vac location information if \"vac\" which-centre value passed in",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const country = 'Ukraine';\nconst city = 'Kiev';\nconst values = Object.assign({\n  'staff-behaviour': 'face-to-face',\n  'which-centre': 'vac',\n  'vac-country': country,\n  'vac-city': city,\n}, complaintDetailsBase);\nconst staffBehaviourComplaint = new StaffBehaviourComplaint(values);\nexpect(\n  staffBehaviourComplaint.complaintAttributes.complaint.complaintDetails.experience\n  ).to.eql({\n    experienceType: 'FACE_TO_FACE',\n    location: {\n      country,\n      city,\n      centreType: 'VAC'\n    }\n  });",
                          "err": {},
                          "uuid": "a7abad88-a1d8-4132-8f0e-9a02ea48cc23",
                          "parentUUID": "1545da28-fbdd-435a-857c-fa3e9c5f4e1a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "returns ssc location information if \"ssc\" which-centre value passed in",
                          "fullTitle": "StaffBehaviourComplaint experience face-to-face which-centre returns ssc location information if \"ssc\" which-centre value passed in",
                          "timedOut": false,
                          "duration": 1,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const city = 'Birmingham';\nconst values = Object.assign({\n  'staff-behaviour': 'face-to-face',\n  'which-centre': 'ssc',\n  'ssc-city': city,\n}, complaintDetailsBase);\nconst staffBehaviourComplaint = new StaffBehaviourComplaint(values);\nexpect(\n  staffBehaviourComplaint.complaintAttributes.complaint.complaintDetails.experience\n  ).to.eql({\n    experienceType: 'FACE_TO_FACE',\n    location: {\n      city,\n      centreType: 'SSC'\n    }\n  });",
                          "err": {},
                          "uuid": "8316182f-e117-46da-9ede-b3a32aab99e4",
                          "parentUUID": "1545da28-fbdd-435a-857c-fa3e9c5f4e1a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "returns ukvcas location information if \"ukvcas\" which-centre value passed in",
                          "fullTitle": "StaffBehaviourComplaint experience face-to-face which-centre returns ukvcas location information if \"ukvcas\" which-centre value passed in",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const city = 'Birmingham';\nconst values = Object.assign({\n  'staff-behaviour': 'face-to-face',\n  'which-centre': 'ukvcas',\n  'ukvcas-city': city,\n}, complaintDetailsBase);\nconst staffBehaviourComplaint = new StaffBehaviourComplaint(values);\nexpect(\n  staffBehaviourComplaint.complaintAttributes.complaint.complaintDetails.experience\n  ).to.eql({\n    experienceType: 'FACE_TO_FACE',\n    location: {\n      city,\n      centreType: 'UKVCAS'\n    }\n  });",
                          "err": {},
                          "uuid": "ac54e262-cf66-45cd-b018-b171ffa97417",
                          "parentUUID": "1545da28-fbdd-435a-857c-fa3e9c5f4e1a",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "throws an error if invalid which-centre is passed",
                          "fullTitle": "StaffBehaviourComplaint experience face-to-face which-centre throws an error if invalid which-centre is passed",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const values = Object.assign({\n  'staff-behaviour': 'face-to-face',\n  'which-centre': 'invalid',\n}, complaintDetailsBase);\nexpect(() => new StaffBehaviourComplaint(values)).to.throw('invalid \"which-centre\" value');",
                          "err": {},
                          "uuid": "d3fae3d2-bcd6-4646-ada5-7f6d86777bbe",
                          "parentUUID": "1545da28-fbdd-435a-857c-fa3e9c5f4e1a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "a7abad88-a1d8-4132-8f0e-9a02ea48cc23",
                        "8316182f-e117-46da-9ede-b3a32aab99e4",
                        "ac54e262-cf66-45cd-b018-b171ffa97417",
                        "d3fae3d2-bcd6-4646-ada5-7f6d86777bbe"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 1,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "be5971f0-049a-4fec-8829-baea92975496",
                  "title": "on-phone",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/staff-behaviour.spec.js",
                  "file": "/test/unit/lib/json-converters/staff-behaviour.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns callDetails information",
                      "fullTitle": "StaffBehaviourComplaint experience on-phone returns callDetails information",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const phoneNumber = '23456789099';\nconst date = 'June 12th 2020';\nconst time = '10:30am';\nconst calledFrom = '2345678908';\nconst values = Object.assign({\n  'staff-behaviour': 'on-phone',\n  'called-number': phoneNumber,\n  'called-date': date,\n  'called-time': time,\n  'called-from': calledFrom,\n}, complaintDetailsBase);\nconst staffBehaviourComplaint = new StaffBehaviourComplaint(values);\nexpect(\n  staffBehaviourComplaint.complaintAttributes.complaint.complaintDetails.experience\n  ).to.eql({\n    experienceType: 'PHONE',\n    callDetails: {\n      numberCalled: phoneNumber,\n      date,\n      time,\n      calledFrom: calledFrom\n    }\n  });",
                      "err": {},
                      "uuid": "fcef230e-dd8e-4f45-81c8-38a02f9b330d",
                      "parentUUID": "be5971f0-049a-4fec-8829-baea92975496",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fcef230e-dd8e-4f45-81c8-38a02f9b330d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "1f717825-1d41-44c0-bffb-8bad43da9421",
                  "title": "in-letter",
                  "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/staff-behaviour.spec.js",
                  "file": "/test/unit/lib/json-converters/staff-behaviour.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns experienceType \"LETTER_OR_EMAIL\"",
                      "fullTitle": "StaffBehaviourComplaint experience in-letter returns experienceType \"LETTER_OR_EMAIL\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = Object.assign({\n  'staff-behaviour': 'in-letter',\n}, complaintDetailsBase);\nconst staffBehaviourComplaint = new StaffBehaviourComplaint(values);\nexpect(staffBehaviourComplaint.complaintAttributes.complaint.complaintDetails.experience.experienceType\n  ).to.eql('LETTER_OR_EMAIL');",
                      "err": {},
                      "uuid": "e506e389-7228-4266-8ea7-f85ed5076a2f",
                      "parentUUID": "1f717825-1d41-44c0-bffb-8bad43da9421",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e506e389-7228-4266-8ea7-f85ed5076a2f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "07ed1fde-6462-4972-baed-faed0334bc77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "298463c0-cf18-495f-930a-997b0894b20b",
          "title": "SubmittingApplicationComplaint",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/submitting-application.spec.js",
          "file": "/test/unit/lib/json-converters/submitting-application.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "227a4b29-15a8-4616-b784-46e83f96cb02",
              "title": "problemExperienced",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/json-converters/submitting-application.spec.js",
              "file": "/test/unit/lib/json-converters/submitting-application.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns \"TECHNICAL_ISSUES\" if \"technical-issues\" immigration-application value passed in",
                  "fullTitle": "SubmittingApplicationComplaint problemExperienced returns \"TECHNICAL_ISSUES\" if \"technical-issues\" immigration-application value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'immigration-application': 'technical-issues',\n}, complaintDetailsBase);\nconst submittingApplicationComplaint = new SubmittingApplicationComplaint(values);\nexpect(\n  submittingApplicationComplaint.complaintAttributes.complaint.complaintDetails.problemExperienced\n  ).to.eql('TECHNICAL_ISSUES');",
                  "err": {},
                  "uuid": "949efe7f-3f16-4ce1-8a46-d85924faee38",
                  "parentUUID": "227a4b29-15a8-4616-b784-46e83f96cb02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"GUIDANCE\" if \"guidance\" immigration-application value passed in",
                  "fullTitle": "SubmittingApplicationComplaint problemExperienced returns \"GUIDANCE\" if \"guidance\" immigration-application value passed in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'immigration-application': 'guidance',\n}, complaintDetailsBase);\nconst submittingApplicationComplaint = new SubmittingApplicationComplaint(values);\nexpect(\n  submittingApplicationComplaint.complaintAttributes.complaint.complaintDetails.problemExperienced\n  ).to.eql('GUIDANCE');",
                  "err": {},
                  "uuid": "74facf25-7576-4dd5-84a4-70957c92617a",
                  "parentUUID": "227a4b29-15a8-4616-b784-46e83f96cb02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns \"SOMETHING_ELSE\" if \"complain\" immigration-application value passed in",
                  "fullTitle": "SubmittingApplicationComplaint problemExperienced returns \"SOMETHING_ELSE\" if \"complain\" immigration-application value passed in",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'immigration-application': 'complain',\n}, complaintDetailsBase);\nconst submittingApplicationComplaint = new SubmittingApplicationComplaint(values);\nexpect(\n  submittingApplicationComplaint.complaintAttributes.complaint.complaintDetails.problemExperienced\n  ).to.eql('SOMETHING_ELSE');",
                  "err": {},
                  "uuid": "a79465e9-d360-420c-9074-987c14172aba",
                  "parentUUID": "227a4b29-15a8-4616-b784-46e83f96cb02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws an error if invalid immigration-application is passed",
                  "fullTitle": "SubmittingApplicationComplaint problemExperienced throws an error if invalid immigration-application is passed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const values = Object.assign({\n  'immigration-application': 'invalid',\n}, complaintDetailsBase);\nexpect(() => new SubmittingApplicationComplaint(values)).to.throw('invalid \"immigration-application\" value');",
                  "err": {},
                  "uuid": "92e4115c-a61e-41b8-9541-77aa9db96734",
                  "parentUUID": "227a4b29-15a8-4616-b784-46e83f96cb02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "949efe7f-3f16-4ce1-8a46-d85924faee38",
                "74facf25-7576-4dd5-84a4-70957c92617a",
                "a79465e9-d360-420c-9074-987c14172aba",
                "92e4115c-a61e-41b8-9541-77aa9db96734"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "75f6e35b-f7c7-4a1f-85b3-9be28a335023",
          "title": "utils",
          "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/utils.spec.js",
          "file": "/test/unit/lib/utils.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"utils\"",
              "fullTitle": "utils \"before each\" hook in \"utils\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "uuidStub = sinon.stub().returns(testUuid);\nsendStub = sinon.stub().resolves();\nsendStub.withArgs({\n  id: testUuid,\n  body: JSON.stringify(invalidComplaintData)\n}).rejects();\ncreateSub = sinon.stub().returns({\n  send: sendStub\n});\nutils = proxyquire('../../../apps/ukvi-complaints/lib/utils', {\n  'sqs-producer': {\n    Producer: {\n      create: createSub\n    }\n  },\n  'uuid': {\n    v4: uuidStub\n  }\n});",
              "err": {},
              "uuid": "743ffac5-86b3-4779-9850-b91c648bd21c",
              "parentUUID": "75f6e35b-f7c7-4a1f-85b3-9be28a335023",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"utils\"",
              "fullTitle": "utils \"after each\" hook in \"utils\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "0cde2162-17f5-4448-ad37-9d1bf49ab70d",
              "parentUUID": "75f6e35b-f7c7-4a1f-85b3-9be28a335023",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "06fb2d89-6ece-41b7-8b8f-d98cb228772f",
              "title": "#validateAgainstSchema",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/utils.spec.js",
              "file": "/test/unit/lib/utils.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true if the complaintData object fits the schema",
                  "fullTitle": "utils #validateAgainstSchema returns true if the complaintData object fits the schema",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(utils.validateAgainstSchema(validComplaintData)).to.eql(true);",
                  "err": {},
                  "uuid": "52e8fbf5-2797-47ac-b358-b13b3176d612",
                  "parentUUID": "06fb2d89-6ece-41b7-8b8f-d98cb228772f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws an error if the complaintData object does not fit the schema",
                  "fullTitle": "utils #validateAgainstSchema throws an error if the complaintData object does not fit the schema",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => utils.validateAgainstSchema(invalidComplaintData)).to.throw();",
                  "err": {},
                  "uuid": "076e8c98-16c8-4862-8e62-45efdae3b052",
                  "parentUUID": "06fb2d89-6ece-41b7-8b8f-d98cb228772f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52e8fbf5-2797-47ac-b358-b13b3176d612",
                "076e8c98-16c8-4862-8e62-45efdae3b052"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "78aac8c7-7b0a-4e3c-af3e-d928ad15f913",
              "title": "#sendToQueue",
              "fullFile": "/Users/JosephCoker/Projects/Home-Office/HOF/ukvi-complaints/test/unit/lib/utils.spec.js",
              "file": "/test/unit/lib/utils.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "calls create on the sqs producer with SQS parameters",
                  "fullTitle": "utils #sendToQueue calls create on the sqs producer with SQS parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "utils.sendToQueue(validComplaintData);\nexpect(createSub).to.have.been.calledOnceWith({\n  queueUrl: 'http://localhost:4566/000000000000/local-queue',\n  region: 'eu-west-2'\n});",
                  "err": {},
                  "uuid": "8325eb4b-4322-4892-9e80-b9f79f4ecffa",
                  "parentUUID": "78aac8c7-7b0a-4e3c-af3e-d928ad15f913",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "calls send on sqs producer with a unique id and stringifyed complaint data",
                  "fullTitle": "utils #sendToQueue calls send on sqs producer with a unique id and stringifyed complaint data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "utils.sendToQueue(validComplaintData);\nexpect(sendStub).to.have.been.calledOnceWith(\n  [\n    {\n      id: testUuid,\n      body: JSON.stringify(validComplaintData)\n    }\n  ]\n);",
                  "err": {},
                  "uuid": "3d706506-f875-4057-8e1e-37d33922c547",
                  "parentUUID": "78aac8c7-7b0a-4e3c-af3e-d928ad15f913",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "rejects if send fails",
                  "fullTitle": "utils #sendToQueue rejects if send fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// eslint-disable-next-line no-unused-expressions\nexpect(utils.sendToQueue(invalidComplaintData)).to.be.rejected;",
                  "err": {},
                  "uuid": "1d7476fc-87ca-4ab4-8fce-81a26d6139ad",
                  "parentUUID": "78aac8c7-7b0a-4e3c-af3e-d928ad15f913",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8325eb4b-4322-4892-9e80-b9f79f4ecffa",
                "3d706506-f875-4057-8e1e-37d33922c547",
                "1d7476fc-87ca-4ab4-8fce-81a26d6139ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "unit",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "none",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "id": "default",
        "consoleReporter": "none",
        "reportDir": "test/executions/mochawesome",
        "reportFilename": "unit"
      },
      "version": "5.2.0"
    }
  }
}