---
kind: pipeline
name: default
type: kubernetes

steps:

- name: redis-test-service
  pull: if-not-exists
  image: redis
  detach: true
  when:
    branch: [ master, feature/* ]
    event: push

- name: mock-sqs-setup
  pull: if-not-exists
  image: docker:latest
  commands:
    # wait for docker service to be up before running docker build
    - n=0; while [ "$n" -lt 60 ] && [ ! -e /var/run/docker.sock ]; do n=$(( n + 1 )); sleep 1; done
    - docker build -q -t sqs-mock test/integration/sqs-mock && docker run --name sqs-mock -p 9324:9324 -d sqs-mock
  volumes:
    - name: dockersock
      path: /var/run
  when:
    branch: [ master, feature/* ]
    event: push

- name: test
  pull: if-not-exists
  image: mcr.microsoft.com/playwright:bionic
  environment:
  commands:
    - npm i -s && npm run build
    - npm test
    - npm run sqs-cleanup
  when:
    branch: [ master, feature/* ]
    event: push

- name: build
  pull: if-not-exists
  image: node:14
  commands:
  - npm --loglevel warn install
  when:
    branch: [ master, feature/* ]
    event: push

- name: build_ukvi-complaints
  pull: if-not-exists
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  commands:
  - n=0; while [ "$n" -lt 60 ] && [ ! docker stats --no-stream ]; do n=$(( n + 1 )); sleep 1; done
  - docker build -t app-$${DRONE_COMMIT_SHA} .
  when:
    branch: [ master, feature/* ]
    event: push

- name: image_to_quay
  pull: if-not-exists
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  environment:
    DOCKER_PASSWORD:
      from_secret: DOCKER_PASSWORD
  commands:
    - n=0; while [ "$n" -lt 60 ] && [ ! docker stats --no-stream ]; do n=$(( n + 1 )); sleep 1; done
    - docker login -u="ukhomeofficedigital+sas_fbis_robot" -p=$${DOCKER_PASSWORD} quay.io
    - docker tag app-$${DRONE_COMMIT_SHA} quay.io/ukhomeofficedigital/ukvi-complaints:$${DRONE_COMMIT_SHA}
    - docker push quay.io/ukhomeofficedigital/ukvi-complaints:$${DRONE_COMMIT_SHA}
  when:
    branch: master
    event: push

- name: clone_repo_build
  pull: if-not-exists
  image: docker:git
  environment:
    DRONE_GIT_USERNAME:
      from_secret: DRONE_GIT_USERNAME
    DRONE_GIT_TOKEN:
      from_secret: DRONE_GIT_TOKEN
  commands:
    - git clone https://$${DRONE_GIT_USERNAME}:$${DRONE_GIT_TOKEN}@github.com/UKHomeOffice/kube-ukvi-complaints.git
    - cd kube-ukvi-complaints
    - if ! [ $(git tag -l dev-${DRONE_COMMIT_SHA}) ]; then git tag dev-${DRONE_COMMIT_SHA} && git push origin --tags; fi
  when:
    branch: master
    event: push

- name: clone_repo_promote
  pull: if-not-exists
  image: docker:git
  environment:
    DRONE_GIT_USERNAME:
      from_secret: DRONE_GIT_USERNAME
    DRONE_GIT_TOKEN:
      from_secret: DRONE_GIT_TOKEN
  commands:
    - git clone https://$${DRONE_GIT_USERNAME}:$${DRONE_GIT_TOKEN}@github.com/UKHomeOffice/kube-ukvi-complaints.git
    - cd kube-ukvi-complaints
    - if ! [ $(git tag -l ${DRONE_DEPLOY_TO}-${DRONE_COMMIT_SHA}) ]; then git tag ${DRONE_DEPLOY_TO}-${DRONE_COMMIT_SHA} && git push origin --tags; fi
  when:
    event: promote
    target: [ preprod, prod ]

- name: deploy_to_dev
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd:v1.14.0
  commands:
    - cd kube-ukvi-complaints
    - bin/deploy.sh
  environment:
    KUBE_SERVER_DEV:
      from_secret: kube_server_dev
    KUBE_TOKEN_DEV:
      from_secret: kube_token_dev
    KUBE_NAMESPACE: ukvi-complaints-dev
    APP_IMAGE_TAG: ${DRONE_COMMIT_SHA}
  when:
    branch: master
    event: push

- name: deploy_to_preprod
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd:v1.14.0
  commands:
    - cd kube-ukvi-complaints
    - bin/deploy.sh
  environment:
    KUBE_SERVER_DEV:
      from_secret: kube_server_dev
    KUBE_TOKEN_DEV:
      from_secret: kube_token_dev
    KUBE_NAMESPACE: sas-ukvi-complaints-preprod
    APP_IMAGE_TAG: ${DRONE_COMMIT_SHA}
  when:
    event: promote
    target: preprod

- name: deploy_to_prod
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd:v1.14.0
  commands:
    - cd kube-ukvi-complaints
    - bin/deploy.sh
  environment:
    KUBE_SERVER_PROD:
      from_secret: kube_server_prod
    KUBE_TOKEN_PROD:
      from_secret: kube_token_prod
    KUBE_NAMESPACE: ukvi-complaints
    APP_IMAGE_TAG: ${DRONE_COMMIT_SHA}
  when:
    event: promote
    target: prod

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

...
